#include <cstdio>
#include <assert.h>
#include <iostream>
using namespace std;
#include "vops.h"
#include "three_cuboids_one_cylinder_0_0.h"
namespace ANONYMOUS{

template<typename T_0, typename T_1, typename T_2>
CuboidHint* CuboidHint::create(float  theta_x_, float  theta_y_, float  theta_z_, int  xlen_, int  ylen_, int  zlen_, T_0* xlist_, int xlist_len, T_1* ylist_, int ylist_len, T_2* zlist_, int zlist_len){
  int tlen_xlist = xlen_; 
  int tlen_ylist = ylen_; 
  int tlen_zlist = zlen_; 
  void* temp= malloc( sizeof(CuboidHint)   + sizeof(float )*tlen_xlist + sizeof(float )*tlen_ylist + sizeof(float )*tlen_zlist); 
  CuboidHint* rv = new (temp)CuboidHint();
  rv->theta_x =  theta_x_;
  rv->theta_y =  theta_y_;
  rv->theta_z =  theta_z_;
  rv->xlen =  xlen_;
  rv->ylen =  ylen_;
  rv->zlen =  zlen_;
  rv->xlist= (float* ) (((char*)&(rv->zlist))   + sizeof(float )*tlen_zlist); 
  CopyArr(rv->xlist, xlist_, tlen_xlist, xlist_len ); 
  rv->ylist= (float* ) (((char*)&(rv->zlist))   + sizeof(float )*tlen_zlist + sizeof(float )*tlen_xlist); 
  CopyArr(rv->ylist, ylist_, tlen_ylist, ylist_len ); 
  CopyArr(rv->zlist, zlist_, tlen_zlist, zlist_len ); 
  return rv;
}
template<typename T_0>
CylinderHint* CylinderHint::create(float  theta_x_, float  theta_y_, float  theta_z_, float  radius_, float  y_, float  z_, int  xlen_, T_0* xlist_, int xlist_len){
  int tlen_xlist = xlen_; 
  void* temp= malloc( sizeof(CylinderHint)   + sizeof(float )*tlen_xlist); 
  CylinderHint* rv = new (temp)CylinderHint();
  rv->theta_x =  theta_x_;
  rv->theta_y =  theta_y_;
  rv->theta_z =  theta_z_;
  rv->radius =  radius_;
  rv->y =  y_;
  rv->z =  z_;
  rv->xlen =  xlen_;
  CopyArr(rv->xlist, xlist_, tlen_xlist, xlist_len ); 
  return rv;
}
Vector* Vector::create(float  x_, float  y_, float  z_){
  void* temp= malloc( sizeof(Vector)  ); 
  Vector* rv = new (temp)Vector();
  rv->x =  x_;
  rv->y =  y_;
  rv->z =  z_;
  return rv;
}
void main__Wrapper(int id) {
  float _tt0[215] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
  float*  zs__ANONYMOUS_s130= new float [215]; CopyArr<float >(zs__ANONYMOUS_s130,_tt0, 215, 215);
  glblInit_zs__ANONYMOUS_s142(zs__ANONYMOUS_s130);
  float _tt1[215] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
  float*  ys__ANONYMOUS_s129= new float [215]; CopyArr<float >(ys__ANONYMOUS_s129,_tt1, 215, 215);
  glblInit_ys__ANONYMOUS_s140(ys__ANONYMOUS_s129);
  float _tt2[215] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
  float*  xs__ANONYMOUS_s128= new float [215]; CopyArr<float >(xs__ANONYMOUS_s128,_tt2, 215, 215);
  glblInit_xs__ANONYMOUS_s138(xs__ANONYMOUS_s128);
  bool _tt3[215] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  bool*  labels__ANONYMOUS_s127= new bool [215]; CopyArr<bool >(labels__ANONYMOUS_s127,_tt3, 215, 215);
  glblInit_labels__ANONYMOUS_s136(labels__ANONYMOUS_s127);
  void * _tt4[1] = {NULL};
  CylinderHint**  cylinderHints__ANONYMOUS_s113= new CylinderHint* [1]; CopyArr<CylinderHint* >(cylinderHints__ANONYMOUS_s113,_tt4, 1, 1);
  glblInit_cylinderHints__ANONYMOUS_s134(cylinderHints__ANONYMOUS_s113);
  void * _tt5[5] = {NULL, NULL, NULL, NULL, NULL};
  CuboidHint**  cuboidHints__ANONYMOUS_s121= new CuboidHint* [5]; CopyArr<CuboidHint* >(cuboidHints__ANONYMOUS_s121,_tt5, 5, 5);
  glblInit_cuboidHints__ANONYMOUS_s132(cuboidHints__ANONYMOUS_s121);
  _main(id, cuboidHints__ANONYMOUS_s121, cylinderHints__ANONYMOUS_s113, labels__ANONYMOUS_s127, xs__ANONYMOUS_s128, ys__ANONYMOUS_s129, zs__ANONYMOUS_s130);
  delete[] zs__ANONYMOUS_s130;
  delete[] ys__ANONYMOUS_s129;
  delete[] xs__ANONYMOUS_s128;
  delete[] labels__ANONYMOUS_s127;
  delete[] cylinderHints__ANONYMOUS_s113;
  delete[] cuboidHints__ANONYMOUS_s121;
}
void main__WrapperNospec(int id) {}
void glblInit_cuboidHints__ANONYMOUS_s132(CuboidHint** cuboidHints__ANONYMOUS_s131/* len = 5 */) {
  float _tt7[4] = {-(2.3530083579536902f), 3.764749998870575f, -(19.000033f), 19.000033f};
  float _tt8[4] = {-(2.360503080549437f), 3.757207678257623f, -(19.000033f), 19.000033f};
  float _tt9[4] = {3.4439278853161857f, -(0.2266692026471483f), -(19.000033f), 19.000033f};
  float _tt10[3] = {0.3080092229245117f, -(19.000033f), 19.000033f};
  float _tt11[2] = {-(19.000033f), 19.000033f};
  float _tt12[4] = {3.4439278853161857f, -(0.2266692026471483f), -(19.000033f), 19.000033f};
  float _tt13[3] = {0.3080092229245117f, -(19.000033f), 19.000033f};
  float _tt14[3] = {1.2848966710297722f, -(19.000033f), 19.000033f};
  float _tt15[3] = {1.8220983799730504f, -(19.000033f), 19.000033f};
  float _tt16[4] = {-(3.2574984370411957f), -(0.8104477357742786f), -(19.000033f), 19.000033f};
  float _tt17[4] = {2.379500866019498f, -(3.7382628982763486f), -(19.000033f), 19.000033f};
  float _tt18[4] = {-(2.5224504745991014f), 1.148220216037654f, -(19.000033f), 19.000033f};
  float _tt19[2] = {-(19.000033f), 19.000033f};
  float _tt20[4] = {-(2.5224504745991014f), 1.148220216037654f, -(19.000033f), 19.000033f};
  float _tt21[4] = {3.4439278853161857f, -(0.2266692026471483f), -(19.000033f), 19.000033f};
  CuboidHint* _tt6[5] = {CuboidHint::create(-(3.106691f), 0.069817f, 0.436333f, 4, 4, 4, _tt7, 4, _tt8, 4, _tt9, 4), CuboidHint::create(-(3.089798f), 0.058403f, 0.698428f, 3, 2, 4, _tt10, 3, _tt11, 2, _tt12, 4), CuboidHint::create(-(2.566199f), 0.058403f, 0.698428f, 3, 3, 3, _tt13, 3, _tt14, 3, _tt15, 3), CuboidHint::create(1.58154f, 0.60111f, 0.091785f, 4, 4, 4, _tt16, 4, _tt17, 4, _tt18, 4), CuboidHint::create(-(3.132706f), 0.077533f, 0.086397f, 2, 4, 4, _tt19, 2, _tt20, 4, _tt21, 4)};
  CopyArr<CuboidHint* >(cuboidHints__ANONYMOUS_s131,_tt6, 5, 5);
}
void glblInit_cylinderHints__ANONYMOUS_s134(CylinderHint** cylinderHints__ANONYMOUS_s133/* len = 1 */) {
  void * _tt22[1] = {NULL};
  CopyArr<CylinderHint* >(cylinderHints__ANONYMOUS_s133,_tt22, 1, 1);
}
void glblInit_labels__ANONYMOUS_s136(bool* labels__ANONYMOUS_s135/* len = 215 */) {
  bool _tt23[215] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  CopyArr<bool >(labels__ANONYMOUS_s135,_tt23, 215, 215);
}
void glblInit_xs__ANONYMOUS_s138(float* xs__ANONYMOUS_s137/* len = 215 */) {
  float _tt24[215] = {-(1.3859866057397068f), -(1.4918018791037906f), -(0.6966959396439902f), 2.9137587677774563f, -(3.6630460425912794f), -(2.5486012666109445f), -(3.2354616662020623f), -(2.676865106011444f), -(2.10561721118652f), -(1.4192007861724734f), -(0.15106616463184042f), -(0.49919002243868427f), -(2.797259245275698f), -(1.5054488712932814f), -(0.6191992232410705f), 1.4269170684962096f, 2.4106359628574543f, 0.1593219591785665f, 1.6383415068478222f, 1.990216211088308f, 2.144971180641422f, -(4.033739430695038f), -(3.013977681691404f), -(3.5009419607668755f), -(3.3214182696487597f), -(2.180592293133887f), -(2.6214836416334633f), -(0.9906556410695199f), -(5.988927956916709f), -(5.056660579643678f), -(5.48989691037989f), -(0.3195434860289984f), 0.8746865406919742f, 2.517815895459451f, -(2.331496522619597f), -(1.2136024175954727f), 0.6712244269974316f, 1.9044140638584546f, 4.260052784827796f, 5.83878619466951f, 2.2945824022553487f, 3.7757360213452955f, 5.029005831174955f, -(5.087154135813771f), -(2.885282434917149f), -(1.4796824259010601f), 0.031886783721869816f, -(3.4853271236525343f), -(2.437952053662323f), -(0.9418240227272588f), -(0.4711387968739937f), 1.8719301343962462f, 3.9169196394715016f, 3.86664304987183f, 5.9896464898575426f, -(0.8923377838480475f), -(0.11337522369676989f), 1.9915186187427267f, 4.059910501670982f, 1.6737976386671498f, 2.637605997609041f, -(5.9745178468128275f), -(3.6965015619102632f), -(3.778598945644495f), -(3.2247132843828683f), -(1.5216997334667246f), -(1.2983878263041835f), -(5.994733949934588f), -(4.45610193636705f), -(3.523234205789421f), -(2.32701364519071f), 0.8675381598241626f, 2.4301653792837956f, -(5.7388638014582165f), -(5.956058852056194f), -(5.789446823291347f), -(5.066414755591616f), -(4.672130294128318f), -(4.370563883559379f), -(1.4414267630901434f), -(1.1866060749561225f), -(1.1620161224836087f), -(5.92566377357491f), -(4.898468729779713f), -(4.695631819743483f), -(3.3833361840128076f), -(2.1807650603793896f), -(1.9925219661934868f), -(1.4634428485222437f), -(5.973306309739245f), -(5.206041219017553f), -(5.893368293556539f), -(4.098755178799199f), -(5.979539931290871f), -(2.637631984404043f), -(1.832379684830574f), -(5.961107322469427f), -(5.324191037945872f), -(5.7776812011944125f), -(4.3296142471300225f), -(4.138115383913223f), -(5.5802197873721555f), -(2.946199573679228f), -(1.9360409821100677f), -(2.4240923538801886f), -(1.8336232319057273f), 0.46697067525951597f, -(4.602378000341135f), -(4.077094251711279f), -(2.566164929481997f), -(2.7297935084726195f), -(1.3810156807429883f), -(0.9014863603336747f), -(0.18840593369466607f), -(4.414741808980541f), -(4.423765486805144f), -(2.8964384513904182f), -(2.9421324337649377f), -(1.9580809316899304f), -(0.3378587024435737f), 0.9162309919680497f, 0.6646415998591774f, 1.0237767800708002f, -(0.6261348091444059f), 0.5499877478081048f, 2.016836738469593f, 2.2755862185340683f, 1.3569224371879915f, -(2.474277837410739f), -(2.2009884102224886f), -(2.104409875960992f), -(1.5814940724704827f), -(0.009806176403484303f), 1.242273896301809f, -(2.3690352187640586f), 0.9035816547255844f, 2.7899489098603594f, 2.939042759127996f, 2.165893092960809f, 1.5983413041097903f, 4.281249207534676f, 5.99177926026273f, 3.4335543464865146f, 5.113555103216213f, 2.596413307195649f, 1.79393586430735f, 5.839409392137468f, 5.9765351788707735f, 4.821052651436697f, 5.944376058879639f, 5.795003577032781f, 3.641443243793186f, 5.3214499097081305f, 3.3927497337113555f, 5.3481341571846714f, -(4.56066601345875f), -(0.04512328729320747f), 0.6696834701855137f, 0.18106815227693393f, -(2.6937543978263605f), 0.21000237248789716f, 1.129929477759953f, 3.3371132927663556f, 4.890617311463374f, 3.135105806203041f, 3.6222819633944154f, 0.7997255859140434f, 3.3456472929306678f, 5.971429129547922f, 3.811859166510248f, 5.663869322583916f, 4.974320805565638f, 2.624070297628171f, 5.140847490701302f, 1.4641048219985024f, 5.544425523322417f, 5.946528500817147f, 3.0629579064992973f, 4.392415813753044f, 2.2414532436802075f, 3.003112226375413f, 5.959687036523972f, 5.934393758923784f, 2.429684590988002f, 5.974423098910094f, -(4.738230736436094f), -(3.3610970266954787f), -(1.2578060264938582f), -(0.874548949942221f), -(2.825436123009424f), -(2.4193823128663423f), -(1.2633270571517299f), -(4.908944588678706f), -(4.276538199973126f), -(4.404938369032669f), -(3.269968139409664f), -(3.329659504307179f), -(2.220130698894756f), -(2.655125573890569f), -(2.407724759050011f), -(2.662221079076174f), -(1.4961568975731292f), -(1.1638426557755772f), 0.17423372152147476f, -(2.915093321360575f), -(2.4872197308873685f), -(2.989267185434783f), -(0.5989988052031716f), 2.5196161393831926f, 1.416800018245476f, 2.659989420517873f, 0.6041221632783862f, 2.81293057123053f, 1.4924702834360621f, 2.831395032975583f};
  CopyArr<float >(xs__ANONYMOUS_s137,_tt24, 215, 215);
}
void glblInit_ys__ANONYMOUS_s140(float* ys__ANONYMOUS_s139/* len = 215 */) {
  float _tt25[215] = {-(1.6753004621707848f), -(1.765116587306545f), -(1.5593499253858196f), -(1.767842809767899f), 0.16129288190563248f, 0.8007553133757487f, -(0.6621090256661522f), -(0.7234073535848644f), 0.40832098220730256f, 0.36752751079086043f, 1.6647464890068295f, -(0.676810465848541f), 0.9312715765100744f, 0.42912976135592135f, -(0.30793612161479306f), 0.8364174321899904f, 0.06903593156380117f, 1.6767962559945744f, 1.642347956371387f, 3.1451893908300446f, 3.1683727384984084f, 1.447278817695948f, 1.800597620638824f, 1.3468179308066404f, 1.237126145301938f, 1.956369569419849f, 1.8380044174262096f, 2.198371668732253f, -(3.4517916012813337f), -(4.109207774197525f), -(2.2863242598207627f), -(4.460624412991202f), -(3.7806994715563764f), -(4.4057018159252275f), -(3.952567015255645f), -(1.9407149710757252f), -(1.762283488094058f), -(2.7893817273712975f), -(3.6510931312921104f), -(2.521898782576281f), -(1.6706477353802487f), -(1.7011164490162463f), -(1.1675547667192614f), -(0.6321887649602388f), -(0.96409272301896f), -(0.3907793224130952f), -(0.5820600291722202f), -(0.019330333921355303f), 0.7719765658610735f, 0.7602962367593128f, 1.0525690651175923f, 1.6128190867550458f, 1.8090415879838275f, -(0.5240841132563974f), -(0.07110035357350192f), 1.7694288759013599f, 1.9651994882301211f, 3.0256584611680055f, 3.761713999497184f, 3.1009755573100777f, 3.690841247337655f, 1.1010644649550982f, 2.0963327387575643f, 1.293214624781776f, 1.810700169270263f, 2.2793876732367395f, 2.323137810135407f, 3.9722915569167805f, 4.460707260476153f, 3.046605808115102f, 4.408271555989603f, 4.302695004944282f, 4.471335776613923f, -(4.480697434421902f), -(2.525524543802281f), -(4.378312378078181f), -(1.7302848770725399f), -(4.231007149388795f), -(3.7294247440348176f), -(1.467264858984396f), -(3.7837848158997005f), -(1.6729527703926896f), -(0.893002071292616f), -(0.19690871782091227f), -(1.061072290016697f), -(0.37682432725301496f), 0.8684555546934593f, -(0.8472516473254152f), -(0.2646787100544905f), 1.1597962871303706f, 1.2372709061423808f, 1.553660787754448f, 0.9919659701766191f, 0.8841278816885337f, 1.7992393321909885f, 1.95166009169449f, 2.9034601222858485f, 3.496911424835188f, 4.4650452000326855f, 4.289079035438111f, 4.468920700594337f, 3.114131487629166f, 3.0992290514302443f, 2.6704523076482687f, 4.35251337364192f, 3.8949194738501483f, -(4.402857112411349f), -(4.16829826470628f), -(4.362706550446535f), -(2.329677427885057f), -(4.334497315181745f), -(4.320480498510362f), -(3.100209618623115f), -(3.8520001162927673f), -(2.3176315120799535f), -(3.7005390285993633f), -(1.7499277388148107f), -(2.359274759996097f), -(3.1897719842798544f), -(2.387026667034256f), -(4.412994129651015f), -(4.407612831775298f), -(3.5839591769845724f), -(4.277197334831955f), -(2.6168685642222953f), -(1.283023532902052f), -(4.219506556652762f), -(4.4706945944681875f), -(2.818673453189504f), -(4.400173169848957f), -(2.313993555398899f), -(4.046750634595085f), -(2.5683725011172074f), -(2.7870514676901097f), -(1.4444126630416987f), -(1.680795085204007f), -(4.3910272990269545f), -(3.1102001533295867f), -(2.7294239221201213f), -(2.053434084633273f), -(3.236252021012656f), -(2.2093353013996735f), -(3.045523825706315f), -(1.173150464965167f), -(1.767410602218797f), -(1.2589843765927569f), -(4.2425265922404405f), -(1.8613794024983816f), -(3.229151169643578f), -(2.123990243485717f), -(1.00922068196522f), -(1.6459494391093963f), -(1.190536028908888f), -(1.753806869707438f), -(1.0880233256273302f), -(0.5953090087317797f), -(0.3533911067197266f), 1.5731869116534656f, -(0.7187858024731167f), -(0.9061493010204396f), -(0.5296630167935569f), -(0.89933432139199f), 2.3444750000300876f, 1.5383111659689908f, -(0.3931479300982135f), 2.3021944923476325f, 1.464896277694444f, 2.4042688058507458f, 2.108637663843125f, -(0.4088915173088709f), 0.30636566959119704f, 2.5728764897768372f, 0.33792284076649315f, 1.1106677192283516f, 2.8686910937798427f, 4.331910095389792f, 3.6830005676868804f, 3.4642418204724383f, 3.712264957115528f, 3.179292024160834f, 3.629939163968088f, 3.28689544694423f, 4.2147407029677995f, 3.139177138072832f, 4.103159123975727f, 1.3488578377947382f, 1.8451076891634122f, 2.1172579446220725f, 2.233101115263645f, 2.0407798291883763f, 2.0106630197741953f, 2.2596961910182496f, 2.872493136116642f, 4.414817456916276f, 2.6081175221212107f, 3.0530201197342763f, 4.038488588508648f, 2.541375850894613f, 2.8599600650319514f, 4.456366956710175f, 4.464375651549964f, 2.831667851236857f, 4.292134006564905f, 4.071807379868216f, 2.6401888823902713f, 2.7458568919643915f, 4.205794258916526f, 3.675664638353835f, 4.448231163158603f, 3.865171228647286f, 4.411404786206962f, 3.9612958863918646f, 4.213478363768289f, 4.26651416493446f, 4.465428645780579f};
  CopyArr<float >(ys__ANONYMOUS_s139,_tt25, 215, 215);
}
void glblInit_zs__ANONYMOUS_s142(float* zs__ANONYMOUS_s141/* len = 215 */) {
  float _tt26[215] = {-(0.09102997629263027f), -(2.8709942300101567f), -(0.4261610250995165f), -(1.6694424578511409f), -(1.1881312823654322f), -(1.1914934955498178f), -(0.20279244245373035f), 0.978026628244186f, -(0.24125578259354463f), 1.4648206101965395f, 2.2957827505409436f, -(2.909225445755778f), -(2.9525782946512353f), -(2.397663141036174f), -(1.0275590886095314f), -(3.056405521787603f), -(2.0575493281337565f), -(2.6047637425717065f), -(0.951619850149553f), -(2.560212014476627f), -(0.9114320650406421f), -(0.9987630871951815f), -(1.7767631345880035f), 0.29563677471807964f, 0.6478619337621263f, 0.08857778332416565f, 1.318809536782614f, 2.845846351805934f, -(3.147279437399679f), -(4.161874138882376f), -(3.6469591188697876f), -(4.514879760548525f), -(4.588299674748313f), -(4.431739438015047f), -(4.342785003520058f), -(4.577417675007111f), -(4.14743799850627f), -(3.9759091350619125f), -(4.58436110567262f), -(4.585608929760142f), -(4.688995746406329f), -(4.17760514227191f), -(4.302184304921904f), -(4.089773142698232f), -(4.53274886281284f), -(4.534782291523065f), -(3.9023106197474497f), -(4.549776079157978f), -(4.054195312395352f), -(3.6526328714927985f), -(4.511109868138386f), -(4.648371750432155f), -(4.562527890225657f), -(3.9430444033501946f), -(4.428689722590224f), -(4.5066218080182665f), -(3.9486248162647954f), -(4.691741903456739f), -(4.580497248488695f), -(3.9132413054066095f), -(3.930705982548427f), -(4.486634907330352f), -(3.3959328061950096f), -(4.2979001249749595f), -(4.2140108610261775f), -(4.585751963265203f), -(3.5407298344554072f), -(4.462079038567935f), -(3.6361879562804624f), -(4.53977648607804f), -(4.406113380120338f), -(4.360945554020429f), -(4.397369160703923f), -(2.751520507263175f), -(1.6921215469877229f), -(0.9414229035776017f), -(0.8355981220326214f), -(0.19141276864585588f), 3.5708633134886503f, 3.742727789774935f, 4.564426890894975f, 4.39412758336171f, -(1.4503095626567613f), -(0.5777751814816386f), 0.09933624722251738f, 3.349682057563015f, 3.676780982896326f, 4.592102553519779f, 4.588918992194148f, -(1.4488231592166556f), -(0.12032262430039126f), 0.9437332047235643f, 0.3871277140534039f, 3.817918826819526f, 3.1764827654210936f, 4.578391543202726f, -(1.3683965121680648f), -(0.13197359962361133f), 1.5886376970114213f, 0.35593732127869154f, 1.2608665881883903f, 4.402410434557728f, 3.4404212329704014f, 4.503149521176579f, 3.688151165710374f, 4.571442510936024f, 2.278698572242059f, -(2.5941562602710566f), -(1.8988853425006174f), -(2.300268332221067f), -(1.346600652618965f), 0.7820643314032569f, 0.05489742976375929f, 1.4519567159103648f, -(2.344704591262538f), -(1.5708571239638631f), -(2.0515716492649196f), -(0.5997142338842543f), 1.1436002141148118f, 2.1613736326363595f, 3.05698162835051f, 4.3956771295797425f, 2.7170693368582186f, 3.8002217479100677f, 3.961370722331632f, 4.571180686433898f, -(2.086387256238659f), 1.0317038780252474f, -(2.997719014763153f), -(3.019672062955234f), -(2.6368497839670835f), -(2.5072889932010423f), -(1.6074077387968722f), 0.9156715304667487f, -(2.550295401891725f), 1.608464389886827f, 2.5055961708548624f, 4.525842209353777f, 2.2783815316952873f, 2.6085981117607298f, -(2.563464976840435f), -(2.6114845932159283f), 0.3207791455531874f, -(1.562567087418313f), 0.5264475759034482f, 1.2946996102722113f, -(0.4922797508342644f), -(0.6208564318966345f), 4.123755540086731f, 1.0534392885369817f, -(0.5266040884709073f), 1.4951031937285484f, 0.7723940844342867f, 4.521927230002637f, 4.545053554605639f, -(2.341516195388822f), 4.145377854511726f, 4.293100651307817f, -(2.1330423192523713f), -(3.0008389114264107f), 0.7282221465978185f, 2.591457284537252f, -(3.19510658846029f), -(1.9797020811340131f), 0.35482409545486804f, -(0.8006889736610227f), 1.1552091438161236f, 0.20312198290325872f, -(0.7480461608378683f), 0.9945898258190089f, 0.7569892899596016f, -(0.390662271280684f), 3.034796140595664f, 3.606659420079149f, 4.347495478653767f, -(3.3571872284615827f), -(2.3788507621145616f), -(2.6635038574258902f), -(1.2741014998436746f), 0.5389398222637624f, 0.2839593506563081f, -(1.101385886083392f), -(0.7440652571653655f), 2.5969196840556914f, 1.6936200820198812f, -(2.283072692262907f), -(2.7071979263532184f), 3.9843162379348858f, 4.422605934377482f, -(3.0007657833493075f), -(2.5415484168903313f), -(0.7860291282904603f), -(2.1707683342956634f), -(2.531310863159202f), -(1.0921655057598485f), -(1.2788101442120217f), 0.8400442827654896f, 0.22520660739585516f, 1.1240183582957473f, -(0.24266951912633344f), 0.7426576091899526f, 0.08400703442066518f, 2.1793035352489816f, 4.154418407398856f, -(2.9823445309131706f), -(2.415302494183647f), -(2.9587549343775184f), -(1.9284516461695462f), -(2.1267054071741f), -(0.4221600978087163f), -(0.6902414394995833f), 1.13859489339782f, 0.3349951967441793f, 2.728448925035083f, 1.5079624227458097f};
  CopyArr<float >(zs__ANONYMOUS_s141,_tt26, 215, 215);
}
void _main(int id, CuboidHint** cuboidHints__ANONYMOUS_s120/* len = 5 */, CylinderHint** cylinderHints__ANONYMOUS_s114/* len = 1 */, bool* labels__ANONYMOUS_s123/* len = 215 */, float* xs__ANONYMOUS_s124/* len = 215 */, float* ys__ANONYMOUS_s125/* len = 215 */, float* zs__ANONYMOUS_s126/* len = 215 */) {
  check(id, cuboidHints__ANONYMOUS_s120, cylinderHints__ANONYMOUS_s114, labels__ANONYMOUS_s123, xs__ANONYMOUS_s124, ys__ANONYMOUS_s125, zs__ANONYMOUS_s126);
}
void check(int i, CuboidHint** cuboidHints__ANONYMOUS_s117/* len = 5 */, CylinderHint** cylinderHints__ANONYMOUS_s118/* len = 1 */, bool* labels__ANONYMOUS_s107/* len = 215 */, float* xs__ANONYMOUS_s108/* len = 215 */, float* ys__ANONYMOUS_s109/* len = 215 */, float* zs__ANONYMOUS_s110/* len = 215 */) {
  Vector*  v=Vector::create((xs__ANONYMOUS_s108[i]), (ys__ANONYMOUS_s109[i]), (zs__ANONYMOUS_s110[i]));
  if ((labels__ANONYMOUS_s107[i])) {
    bool  _out_s2=0;
    contains(v, 4, _out_s2, cuboidHints__ANONYMOUS_s117, cylinderHints__ANONYMOUS_s118);
  } else {
    bool  _out_s4=0;
    contains(v, 4, _out_s4, cuboidHints__ANONYMOUS_s117, cylinderHints__ANONYMOUS_s118);
  }
}
void contains(Vector* p, int num_primitives_0, bool& _out, CuboidHint** cuboidHints__ANONYMOUS_s119/* len = 5 */, CylinderHint** cylinderHints__ANONYMOUS_s116/* len = 1 */) {
  char _tt27[11] = {'/', '/', ' ', 'B', 'e', 'g', 'i', 'n', '.', '\n', '\0'};
  print(11, _tt27);
  char _tt28[11] = {'u', 'n', 'i', 'o', 'n', '(', ')', ' ', '{', '\n', '\0'};
  print(11, _tt28);
  char _tt29[16] = {'d', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 'c', 'e', '(', ')', ' ', '{', '\n', '\0'};
  print(16, _tt29);
  CuboidHint*  c=NULL;
  c = (cuboidHints__ANONYMOUS_s119[0]);
  Vector*  p_rotated_s22=NULL;
  inverse_rotate(p, c->theta_x, c->theta_y, c->theta_z, p_rotated_s22);
  int  n=c->xlen;
  float*  offsets= new float [n]; CopyArr<float >(offsets,c->xlist, n, c->xlen);
  int  n_0=c->ylen;
  float*  offsets_0= new float [n_0]; CopyArr<float >(offsets_0,c->ylist, n_0, c->ylen);
  int  n_1=c->zlen;
  float*  offsets_1= new float [n_1]; CopyArr<float >(offsets_1,c->zlist, n_1, c->zlen);
  int  n_2=c->xlen;
  float*  offsets_2= new float [n_2]; CopyArr<float >(offsets_2,c->xlist, n_2, c->xlen);
  int  n_3=c->ylen;
  float*  offsets_3= new float [n_3]; CopyArr<float >(offsets_3,c->ylist, n_3, c->ylen);
  int  n_4=c->zlen;
  float*  offsets_4= new float [n_4]; CopyArr<float >(offsets_4,c->zlist, n_4, c->zlen);
  float  roll_s36=0.0f;
  radian_to_degree(c->theta_x, roll_s36);
  float  pitch_s38=0.0f;
  radian_to_degree(c->theta_y, pitch_s38);
  float  yaw_s40=0.0f;
  radian_to_degree(c->theta_z, yaw_s40);
  char _tt30[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt30);
  printfloat(roll_s36);
  char _tt31[3] = {',', ' ', '\0'};
  print(3, _tt31);
  printfloat(pitch_s38);
  char _tt32[3] = {',', ' ', '\0'};
  print(3, _tt32);
  printfloat(yaw_s40);
  char _tt33[4] = {']', ')', '\n', '\0'};
  print(4, _tt33);
  char _tt34[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt34);
  printfloat(((offsets_2[1]) + (offsets[0])) * 0.5f);
  char _tt35[3] = {',', ' ', '\0'};
  print(3, _tt35);
  printfloat(((offsets_3[1]) + (offsets_0[0])) * 0.5f);
  char _tt36[3] = {',', ' ', '\0'};
  print(3, _tt36);
  printfloat(((offsets_4[0]) + (offsets_1[1])) * 0.5f);
  char _tt37[4] = {']', ')', '\n', '\0'};
  print(4, _tt37);
  char _tt38[14] = {'c', 'u', 'b', 'e', '(', 's', 'i', 'z', 'e', ' ', '=', ' ', '[', '\0'};
  print(14, _tt38);
  printfloat((offsets_2[1]) - (offsets[0]));
  char _tt39[3] = {',', ' ', '\0'};
  print(3, _tt39);
  printfloat((offsets_3[1]) - (offsets_0[0]));
  char _tt40[3] = {',', ' ', '\0'};
  print(3, _tt40);
  printfloat((offsets_4[0]) - (offsets_1[1]));
  char _tt41[20] = {']', ',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ')', ';', '\n', '\0'};
  print(20, _tt41);
  bool  x_in_range=((p_rotated_s22->x) >= ((offsets[0]))) && ((p_rotated_s22->x) <= ((offsets_2[1])));
  bool  y_in_range=((p_rotated_s22->y) >= ((offsets_0[0]))) && ((p_rotated_s22->y) <= ((offsets_3[1])));
  bool  z_in_range=((p_rotated_s22->z) >= ((offsets_1[1]))) && ((p_rotated_s22->z) <= ((offsets_4[0])));
  char _tt42[2] = {'\n', '\0'};
  print(2, _tt42);
  CuboidHint*  c_0=(cuboidHints__ANONYMOUS_s119[2]);
  Vector*  p_rotated_s22_0=NULL;
  inverse_rotate(p, c_0->theta_x, c_0->theta_y, c_0->theta_z, p_rotated_s22_0);
  int  n_5=c_0->xlen;
  float*  offsets_5= new float [n_5]; CopyArr<float >(offsets_5,c_0->xlist, n_5, c_0->xlen);
  float  xl_s24_0=(offsets_5[n_5 - 2]);
  int  n_6=c_0->ylen;
  float*  offsets_6= new float [n_6]; CopyArr<float >(offsets_6,c_0->ylist, n_6, c_0->ylen);
  int  n_7=c_0->zlen;
  float*  offsets_7= new float [n_7]; CopyArr<float >(offsets_7,c_0->zlist, n_7, c_0->zlen);
  float  zl_s28_0=(offsets_7[n_7 - 2]);
  int  n_8=c_0->xlen;
  float*  offsets_8= new float [n_8]; CopyArr<float >(offsets_8,c_0->xlist, n_8, c_0->xlen);
  int  n_9=c_0->ylen;
  float*  offsets_9= new float [n_9]; CopyArr<float >(offsets_9,c_0->ylist, n_9, c_0->ylen);
  float  yu_s32_0=(offsets_9[n_9 - 1]);
  int  n_10=c_0->zlen;
  float*  offsets_10= new float [n_10]; CopyArr<float >(offsets_10,c_0->zlist, n_10, c_0->zlen);
  float  roll_s36_0=0.0f;
  radian_to_degree(c_0->theta_x, roll_s36_0);
  float  pitch_s38_0=0.0f;
  radian_to_degree(c_0->theta_y, pitch_s38_0);
  float  yaw_s40_0=0.0f;
  radian_to_degree(c_0->theta_z, yaw_s40_0);
  char _tt43[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt43);
  printfloat(roll_s36_0);
  char _tt44[3] = {',', ' ', '\0'};
  print(3, _tt44);
  printfloat(pitch_s38_0);
  char _tt45[3] = {',', ' ', '\0'};
  print(3, _tt45);
  printfloat(yaw_s40_0);
  char _tt46[4] = {']', ')', '\n', '\0'};
  print(4, _tt46);
  char _tt47[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt47);
  printfloat(((offsets_8[0]) + xl_s24_0) * 0.5f);
  char _tt48[3] = {',', ' ', '\0'};
  print(3, _tt48);
  printfloat((yu_s32_0 + (offsets_6[0])) * 0.5f);
  char _tt49[3] = {',', ' ', '\0'};
  print(3, _tt49);
  printfloat(((offsets_10[0]) + zl_s28_0) * 0.5f);
  char _tt50[4] = {']', ')', '\n', '\0'};
  print(4, _tt50);
  char _tt51[14] = {'c', 'u', 'b', 'e', '(', 's', 'i', 'z', 'e', ' ', '=', ' ', '[', '\0'};
  print(14, _tt51);
  printfloat((offsets_8[0]) - xl_s24_0);
  char _tt52[3] = {',', ' ', '\0'};
  print(3, _tt52);
  printfloat(yu_s32_0 - (offsets_6[0]));
  char _tt53[3] = {',', ' ', '\0'};
  print(3, _tt53);
  printfloat((offsets_10[0]) - zl_s28_0);
  char _tt54[20] = {']', ',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ')', ';', '\n', '\0'};
  print(20, _tt54);
  bool  x_in_range_0=((p_rotated_s22_0->x) >= (xl_s24_0)) && ((p_rotated_s22_0->x) <= ((offsets_8[0])));
  bool  y_in_range_0=((p_rotated_s22_0->y) >= ((offsets_6[0]))) && ((p_rotated_s22_0->y) <= (yu_s32_0));
  bool  z_in_range_0=((p_rotated_s22_0->z) >= (zl_s28_0)) && ((p_rotated_s22_0->z) <= ((offsets_10[0])));
  char _tt55[3] = {'}', '\n', '\0'};
  print(3, _tt55);
  char _tt56[2] = {'\n', '\0'};
  print(2, _tt56);
  char _tt57[16] = {'d', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 'c', 'e', '(', ')', ' ', '{', '\n', '\0'};
  print(16, _tt57);
  CuboidHint*  c_1=(cuboidHints__ANONYMOUS_s119[3]);
  Vector*  p_rotated_s22_1=NULL;
  inverse_rotate(p, c_1->theta_x, c_1->theta_y, c_1->theta_z, p_rotated_s22_1);
  int  n_11=c_1->xlen;
  float*  offsets_11= new float [n_11]; CopyArr<float >(offsets_11,c_1->xlist, n_11, c_1->xlen);
  int  n_12=c_1->ylen;
  float*  offsets_12= new float [n_12]; CopyArr<float >(offsets_12,c_1->ylist, n_12, c_1->ylen);
  int  n_13=c_1->zlen;
  float*  offsets_13= new float [n_13]; CopyArr<float >(offsets_13,c_1->zlist, n_13, c_1->zlen);
  int  n_14=c_1->xlen;
  float*  offsets_14= new float [n_14]; CopyArr<float >(offsets_14,c_1->xlist, n_14, c_1->xlen);
  int  n_15=c_1->ylen;
  float*  offsets_15= new float [n_15]; CopyArr<float >(offsets_15,c_1->ylist, n_15, c_1->ylen);
  int  n_16=c_1->zlen;
  float*  offsets_16= new float [n_16]; CopyArr<float >(offsets_16,c_1->zlist, n_16, c_1->zlen);
  float  roll_s36_1=0.0f;
  radian_to_degree(c_1->theta_x, roll_s36_1);
  float  pitch_s38_1=0.0f;
  radian_to_degree(c_1->theta_y, pitch_s38_1);
  float  yaw_s40_1=0.0f;
  radian_to_degree(c_1->theta_z, yaw_s40_1);
  char _tt58[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt58);
  printfloat(roll_s36_1);
  char _tt59[3] = {',', ' ', '\0'};
  print(3, _tt59);
  printfloat(pitch_s38_1);
  char _tt60[3] = {',', ' ', '\0'};
  print(3, _tt60);
  printfloat(yaw_s40_1);
  char _tt61[4] = {']', ')', '\n', '\0'};
  print(4, _tt61);
  char _tt62[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt62);
  printfloat(((offsets_14[1]) + (offsets_11[0])) * 0.5f);
  char _tt63[3] = {',', ' ', '\0'};
  print(3, _tt63);
  printfloat(((offsets_15[0]) + (offsets_12[1])) * 0.5f);
  char _tt64[3] = {',', ' ', '\0'};
  print(3, _tt64);
  printfloat(((offsets_16[1]) + (offsets_13[0])) * 0.5f);
  char _tt65[4] = {']', ')', '\n', '\0'};
  print(4, _tt65);
  char _tt66[14] = {'c', 'u', 'b', 'e', '(', 's', 'i', 'z', 'e', ' ', '=', ' ', '[', '\0'};
  print(14, _tt66);
  printfloat((offsets_14[1]) - (offsets_11[0]));
  char _tt67[3] = {',', ' ', '\0'};
  print(3, _tt67);
  printfloat((offsets_15[0]) - (offsets_12[1]));
  char _tt68[3] = {',', ' ', '\0'};
  print(3, _tt68);
  printfloat((offsets_16[1]) - (offsets_13[0]));
  char _tt69[20] = {']', ',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ')', ';', '\n', '\0'};
  print(20, _tt69);
  bool  x_in_range_1=((p_rotated_s22_1->x) >= ((offsets_11[0]))) && ((p_rotated_s22_1->x) <= ((offsets_14[1])));
  bool  y_in_range_1=((p_rotated_s22_1->y) >= ((offsets_12[1]))) && ((p_rotated_s22_1->y) <= ((offsets_15[0])));
  bool  z_in_range_1=((p_rotated_s22_1->z) >= ((offsets_13[0]))) && ((p_rotated_s22_1->z) <= ((offsets_16[1])));
  char _tt70[2] = {'\n', '\0'};
  print(2, _tt70);
  CuboidHint*  c_2=(cuboidHints__ANONYMOUS_s119[0]);
  Vector*  p_rotated_s22_2=NULL;
  inverse_rotate(p, c_2->theta_x, c_2->theta_y, c_2->theta_z, p_rotated_s22_2);
  int  n_17=c_2->xlen;
  float*  offsets_17= new float [n_17]; CopyArr<float >(offsets_17,c_2->xlist, n_17, c_2->xlen);
  int  n_18=c_2->ylen;
  float*  offsets_18= new float [n_18]; CopyArr<float >(offsets_18,c_2->ylist, n_18, c_2->ylen);
  float  yl_s26_2=(offsets_18[n_18 - 2]);
  int  n_19=c_2->zlen;
  float*  offsets_19= new float [n_19]; CopyArr<float >(offsets_19,c_2->zlist, n_19, c_2->zlen);
  int  n_20=c_2->xlen;
  float*  offsets_20= new float [n_20]; CopyArr<float >(offsets_20,c_2->xlist, n_20, c_2->xlen);
  float  xu_s30_2=(offsets_20[n_20 - 1]);
  int  n_21=c_2->ylen;
  float*  offsets_21= new float [n_21]; CopyArr<float >(offsets_21,c_2->ylist, n_21, c_2->ylen);
  int  n_22=c_2->zlen;
  float*  offsets_22= new float [n_22]; CopyArr<float >(offsets_22,c_2->zlist, n_22, c_2->zlen);
  float  zu_s34_2=(offsets_22[n_22 - 1]);
  float  roll_s36_2=0.0f;
  radian_to_degree(c_2->theta_x, roll_s36_2);
  float  pitch_s38_2=0.0f;
  radian_to_degree(c_2->theta_y, pitch_s38_2);
  float  yaw_s40_2=0.0f;
  radian_to_degree(c_2->theta_z, yaw_s40_2);
  char _tt71[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt71);
  printfloat(roll_s36_2);
  char _tt72[3] = {',', ' ', '\0'};
  print(3, _tt72);
  printfloat(pitch_s38_2);
  char _tt73[3] = {',', ' ', '\0'};
  print(3, _tt73);
  printfloat(yaw_s40_2);
  char _tt74[4] = {']', ')', '\n', '\0'};
  print(4, _tt74);
  char _tt75[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt75);
  printfloat((xu_s30_2 + (offsets_17[0])) * 0.5f);
  char _tt76[3] = {',', ' ', '\0'};
  print(3, _tt76);
  printfloat(((offsets_21[1]) + yl_s26_2) * 0.5f);
  char _tt77[3] = {',', ' ', '\0'};
  print(3, _tt77);
  printfloat((zu_s34_2 + (offsets_19[0])) * 0.5f);
  char _tt78[4] = {']', ')', '\n', '\0'};
  print(4, _tt78);
  char _tt79[14] = {'c', 'u', 'b', 'e', '(', 's', 'i', 'z', 'e', ' ', '=', ' ', '[', '\0'};
  print(14, _tt79);
  printfloat(xu_s30_2 - (offsets_17[0]));
  char _tt80[3] = {',', ' ', '\0'};
  print(3, _tt80);
  printfloat((offsets_21[1]) - yl_s26_2);
  char _tt81[3] = {',', ' ', '\0'};
  print(3, _tt81);
  printfloat(zu_s34_2 - (offsets_19[0]));
  char _tt82[20] = {']', ',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ')', ';', '\n', '\0'};
  print(20, _tt82);
  bool  x_in_range_2=((p_rotated_s22_2->x) >= ((offsets_17[0]))) && ((p_rotated_s22_2->x) <= (xu_s30_2));
  bool  y_in_range_2=((p_rotated_s22_2->y) >= (yl_s26_2)) && ((p_rotated_s22_2->y) <= ((offsets_21[1])));
  bool  z_in_range_2=((p_rotated_s22_2->z) >= ((offsets_19[0]))) && ((p_rotated_s22_2->z) <= (zu_s34_2));
  char _tt83[3] = {'}', '\n', '\0'};
  print(3, _tt83);
  char _tt84[3] = {'}', '\n', '\0'};
  print(3, _tt84);
  _out = (((x_in_range && y_in_range) && z_in_range) && !(((x_in_range_0 && y_in_range_0) && z_in_range_0))) || (((x_in_range_1 && y_in_range_1) && z_in_range_1) && !(((x_in_range_2 && y_in_range_2) && z_in_range_2)));
  char _tt85[9] = {'/', '/', ' ', 'E', 'n', 'd', '.', '\n', '\0'};
  print(9, _tt85);
  delete[] offsets;
  delete[] offsets_0;
  delete[] offsets_1;
  delete[] offsets_2;
  delete[] offsets_3;
  delete[] offsets_4;
  delete[] offsets_5;
  delete[] offsets_6;
  delete[] offsets_7;
  delete[] offsets_8;
  delete[] offsets_9;
  delete[] offsets_10;
  delete[] offsets_11;
  delete[] offsets_12;
  delete[] offsets_13;
  delete[] offsets_14;
  delete[] offsets_15;
  delete[] offsets_16;
  delete[] offsets_17;
  delete[] offsets_18;
  delete[] offsets_19;
  delete[] offsets_20;
  delete[] offsets_21;
  delete[] offsets_22;
  return;
}
void print(int n, char* message/* len = n */) { std::cout << message; }
void inverse_rotate(Vector* p, float theta_x, float theta_y, float theta_z, Vector*& _out) {
  float  x0=p->x;
  float  y0=p->y;
  float  z0=p->z;
  float  x1_s44=0.0f;
  math::cos(-(theta_z), x1_s44);
  float  x1_s46=0.0f;
  math::sin(-(theta_z), x1_s46);
  float  x1=0.0f;
  x1 = (x1_s44 * x0) - (x1_s46 * y0);
  float  y1_s48=0.0f;
  math::sin(-(theta_z), y1_s48);
  float  y1_s50=0.0f;
  math::cos(-(theta_z), y1_s50);
  float  y1=0.0f;
  y1 = (y1_s48 * x0) + (y1_s50 * y0);
  float  x2_s52=0.0f;
  math::cos(-(theta_y), x2_s52);
  float  x2_s54=0.0f;
  math::sin(-(theta_y), x2_s54);
  float  x2=0.0f;
  x2 = (x2_s52 * x1) + (x2_s54 * z0);
  float  z2_s56=0.0f;
  math::sin(-(theta_y), z2_s56);
  float  z2_s58=0.0f;
  math::cos(-(theta_y), z2_s58);
  float  z2=0.0f;
  z2 = (-(z2_s56) * x1) + (z2_s58 * z0);
  float  y3_s60=0.0f;
  math::cos(-(theta_x), y3_s60);
  float  y3_s62=0.0f;
  math::sin(-(theta_x), y3_s62);
  float  y3=0.0f;
  y3 = (y3_s60 * y1) - (y3_s62 * z2);
  float  z3_s64=0.0f;
  math::sin(-(theta_x), z3_s64);
  float  z3_s66=0.0f;
  math::cos(-(theta_x), z3_s66);
  float  z3=0.0f;
  z3 = (z3_s64 * y1) + (z3_s66 * z2);
  _out = Vector::create(x2, y3, z3);
  return;
}
void radian_to_degree(float radian, float& _out) {
  _out = (radian / 3.141592653589793f) * 180.0f;
  return;
}
void printfloat(float n) { std::cout << n; }

}
namespace math{

void cos(float v, float& _out) {_out = cosf(v);}
void sin(float v, float& _out) {_out = sinf(v);}
void tan(float v, float& _out) {_out = tanf(v);}
void sqrt(float v, float& _out) {_out = sqrtf(v);}
void log(float v, float& _out) {_out = logf(v);}
void arctan(float v, float& _out) {_out = atanf(v);}
void _cast_int_float(int v, float& _out) {_out = (float)v;}
void exp(float v, float& _out) {_out = expf(v);}

}
