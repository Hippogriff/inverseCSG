#include <cstdio>
#include <assert.h>
#include <iostream>
using namespace std;
#include "vops.h"
#include "spot_4_0.h"
namespace ANONYMOUS{

template<typename T_0, typename T_1, typename T_2>
CuboidHint* CuboidHint::create(float  theta_x_, float  theta_y_, float  theta_z_, int  xlen_, int  ylen_, int  zlen_, T_0* xlist_, int xlist_len, T_1* ylist_, int ylist_len, T_2* zlist_, int zlist_len){
  int tlen_xlist = xlen_; 
  int tlen_ylist = ylen_; 
  int tlen_zlist = zlen_; 
  void* temp= malloc( sizeof(CuboidHint)   + sizeof(float )*tlen_xlist + sizeof(float )*tlen_ylist + sizeof(float )*tlen_zlist); 
  CuboidHint* rv = new (temp)CuboidHint();
  rv->theta_x =  theta_x_;
  rv->theta_y =  theta_y_;
  rv->theta_z =  theta_z_;
  rv->xlen =  xlen_;
  rv->ylen =  ylen_;
  rv->zlen =  zlen_;
  rv->xlist= (float* ) (((char*)&(rv->zlist))   + sizeof(float )*tlen_zlist); 
  CopyArr(rv->xlist, xlist_, tlen_xlist, xlist_len ); 
  rv->ylist= (float* ) (((char*)&(rv->zlist))   + sizeof(float )*tlen_zlist + sizeof(float )*tlen_xlist); 
  CopyArr(rv->ylist, ylist_, tlen_ylist, ylist_len ); 
  CopyArr(rv->zlist, zlist_, tlen_zlist, zlist_len ); 
  return rv;
}
template<typename T_0>
CylinderHint* CylinderHint::create(float  theta_x_, float  theta_y_, float  theta_z_, float  radius_, float  y_, float  z_, int  xlen_, T_0* xlist_, int xlist_len){
  int tlen_xlist = xlen_; 
  void* temp= malloc( sizeof(CylinderHint)   + sizeof(float )*tlen_xlist); 
  CylinderHint* rv = new (temp)CylinderHint();
  rv->theta_x =  theta_x_;
  rv->theta_y =  theta_y_;
  rv->theta_z =  theta_z_;
  rv->radius =  radius_;
  rv->y =  y_;
  rv->z =  z_;
  rv->xlen =  xlen_;
  CopyArr(rv->xlist, xlist_, tlen_xlist, xlist_len ); 
  return rv;
}
Vector* Vector::create(float  x_, float  y_, float  z_){
  void* temp= malloc( sizeof(Vector)  ); 
  Vector* rv = new (temp)Vector();
  rv->x =  x_;
  rv->y =  y_;
  rv->z =  z_;
  return rv;
}
void main__Wrapper(int id) {
  float _tt0[515] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
  float*  zs__ANONYMOUS_s139= new float [515]; CopyArr<float >(zs__ANONYMOUS_s139,_tt0, 515, 515);
  glblInit_zs__ANONYMOUS_s162(zs__ANONYMOUS_s139);
  float _tt1[515] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
  float*  ys__ANONYMOUS_s138= new float [515]; CopyArr<float >(ys__ANONYMOUS_s138,_tt1, 515, 515);
  glblInit_ys__ANONYMOUS_s160(ys__ANONYMOUS_s138);
  float _tt2[515] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
  float*  xs__ANONYMOUS_s137= new float [515]; CopyArr<float >(xs__ANONYMOUS_s137,_tt2, 515, 515);
  glblInit_xs__ANONYMOUS_s158(xs__ANONYMOUS_s137);
  bool _tt3[515] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  bool*  labels__ANONYMOUS_s136= new bool [515]; CopyArr<bool >(labels__ANONYMOUS_s136,_tt3, 515, 515);
  glblInit_labels__ANONYMOUS_s156(labels__ANONYMOUS_s136);
  void * _tt4[4] = {NULL, NULL, NULL, NULL};
  CylinderHint**  cylinderHints__ANONYMOUS_s134= new CylinderHint* [4]; CopyArr<CylinderHint* >(cylinderHints__ANONYMOUS_s134,_tt4, 4, 4);
  glblInit_cylinderHints__ANONYMOUS_s154(cylinderHints__ANONYMOUS_s134);
  void * _tt5[4] = {NULL, NULL, NULL, NULL};
  CuboidHint**  cuboidHints__ANONYMOUS_s143= new CuboidHint* [4]; CopyArr<CuboidHint* >(cuboidHints__ANONYMOUS_s143,_tt5, 4, 4);
  glblInit_cuboidHints__ANONYMOUS_s152(cuboidHints__ANONYMOUS_s143);
  _main(id, cuboidHints__ANONYMOUS_s143, cylinderHints__ANONYMOUS_s134, labels__ANONYMOUS_s136, xs__ANONYMOUS_s137, ys__ANONYMOUS_s138, zs__ANONYMOUS_s139);
  delete[] zs__ANONYMOUS_s139;
  delete[] ys__ANONYMOUS_s138;
  delete[] xs__ANONYMOUS_s137;
  delete[] labels__ANONYMOUS_s136;
  delete[] cylinderHints__ANONYMOUS_s134;
  delete[] cuboidHints__ANONYMOUS_s143;
}
void main__WrapperNospec(int id) {}
void glblInit_cuboidHints__ANONYMOUS_s152(CuboidHint** cuboidHints__ANONYMOUS_s151/* len = 4 */) {
  float _tt7[2] = {-(19.0f), 19.0f};
  float _tt8[2] = {-(19.0f), 19.0f};
  float _tt9[3] = {-(0.4286017302258171f), -(19.0f), 19.0f};
  float _tt10[2] = {-(19.0f), 19.0f};
  float _tt11[3] = {2.266239485790319f, -(19.0f), 19.0f};
  float _tt12[2] = {-(19.0f), 19.0f};
  float _tt13[2] = {-(19.0f), 19.0f};
  float _tt14[3] = {3.132399000451638f, -(19.0f), 19.0f};
  float _tt15[2] = {-(19.0f), 19.0f};
  float _tt16[4] = {1.795782085556844f, 1.222984610012955f, -(19.0f), 19.0f};
  float _tt17[2] = {-(19.0f), 19.0f};
  float _tt18[2] = {-(19.0f), 19.0f};
  CuboidHint* _tt6[4] = {CuboidHint::create(-(2.802371f), 0.0f, 0.108098f, 2, 2, 3, _tt7, 2, _tt8, 2, _tt9, 3), CuboidHint::create(-(2.680251f), 0.0f, 0.194511f, 2, 3, 2, _tt10, 2, _tt11, 3, _tt12, 2), CuboidHint::create(2.957484f, 0.0f, 0.309698f, 2, 3, 2, _tt13, 2, _tt14, 3, _tt15, 2), CuboidHint::create(-(0.0f), -(0.00119f), -(0.00272f), 4, 2, 2, _tt16, 4, _tt17, 2, _tt18, 2)};
  CopyArr<CuboidHint* >(cuboidHints__ANONYMOUS_s151,_tt6, 4, 4);
}
void glblInit_cylinderHints__ANONYMOUS_s154(CylinderHint** cylinderHints__ANONYMOUS_s153/* len = 4 */) {
  float _tt20[3] = {0.4286017302258171f, -(19.0f), 19.0f};
  float _tt21[2] = {-(19.0f), 19.0f};
  float _tt22[3] = {2.266239485790319f, -(19.0f), 19.0f};
  float _tt23[2] = {-(19.0f), 19.0f};
  CylinderHint* _tt19[4] = {CylinderHint::create(0.0f, -(1.231574f), -(1.462698f), 2.01835f, -(0.126678f), -(0.790822f), 3, _tt20, 3), CylinderHint::create(0.0f, 0.023242f, -(1.474291f), 0.83157f, 1.047796f, -(0.861823f), 2, _tt21, 2), CylinderHint::create(0.0f, 0.461342f, -(1.376285f), 1.74269f, 0.351596f, -(3.532067f), 3, _tt22, 3), CylinderHint::create(0.0f, 0.027954f, -(1.557691f), 0.84876f, -(1.358319f), -(0.92254f), 2, _tt23, 2)};
  CopyArr<CylinderHint* >(cylinderHints__ANONYMOUS_s153,_tt19, 4, 4);
}
void glblInit_labels__ANONYMOUS_s156(bool* labels__ANONYMOUS_s155/* len = 515 */) {
  bool _tt24[515] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  CopyArr<bool >(labels__ANONYMOUS_s155,_tt24, 515, 515);
}
void glblInit_xs__ANONYMOUS_s158(float* xs__ANONYMOUS_s157/* len = 515 */) {
  float _tt25[515] = {-(1.5102494833704099f), -(1.593158179001591f), -(1.8382632985424736f), -(1.8821056008103423f), -(1.4720902277383332f), -(1.8261236797913671f), -(1.5275806287904934f), -(1.6050782119557998f), -(1.723164926565325f), -(1.5190315168598407f), -(1.8925386507019846f), -(1.5016493110686195f), -(1.10778846437861f), -(0.8389251943980973f), -(0.216846569335529f), -(0.7545464272961143f), -(1.13970122057711f), -(0.2118876047116481f), -(0.20951784232462353f), -(0.8813579378890423f), -(1.1395370297296046f), -(1.056512804770429f), 1.0397722653459691f, 0.8094224636129946f, 1.0802300573186276f, 0.35891091198083913f, 0.8634006625050524f, 1.0662654648458751f, 0.5067580816832805f, 0.9234807234529779f, 1.0919546452580045f, 0.31453622922154756f, 0.2944677314245635f, 0.503923669739864f, 0.6015578441431667f, 0.9614519100177322f, 0.8486098272358413f, 0.9161054181148046f, 0.9928626987458454f, 1.0701746714711569f, 1.0871636575662593f, 1.0225567283674468f, 1.5092029937032165f, 1.677173886886856f, 1.6026366501946552f, 1.5466655272827274f, 1.518904451090129f, 1.612975198352315f, 1.5209808658094306f, 1.5424777248424146f, 1.581949758290316f, 1.6422376255931943f, 1.612519929434973f, 1.572401356649679f, 1.6225125259153548f, 1.5904752957015693f, 1.5321036816027411f, 2.035878468560873f, 1.9358745582504602f, 1.9493000101880957f, 1.9263704409485762f, 1.9293636578256421f, -(2.0694142560373665f), -(1.567229953216821f), -(3.2885723597133234f), -(1.8168457050580635f), -(3.2920782815413236f), -(2.573993733008285f), -(1.4948219923716575f), -(1.502395641362087f), -(3.0953769420811312f), -(2.850681331427868f), -(1.4581952052946763f), -(3.2926666922245396f), -(3.2864145918762007f), -(1.9228602644819497f), -(1.839241032088288f), -(2.8017157994426696f), -(1.9436696368946533f), -(1.5496859242751144f), -(2.546098797428777f), -(2.5359685898365942f), -(1.6496078530463172f), -(2.594910741384501f), -(1.9197707133045547f), -(1.9440405012740865f), -(2.557555643017072f), -(3.2639214601180133f), -(2.089236838255013f), -(1.855525556952885f), -(1.638237650535944f), -(2.18480639921753f), -(2.3211242890834547f), -(1.6815156068017205f), -(2.5187923686173717f), -(1.8368190745186987f), -(1.9580940504563085f), -(1.4423422442777014f), -(2.081597349116563f), -(3.2931390410096184f), -(3.292952520122321f), -(1.8507083967750186f), -(1.6536345197868552f), -(2.0941680032415735f), -(1.9538667027791656f), -(1.7494242944626148f), -(1.5522632378090684f), -(1.4813382945318945f), -(2.9310109702597518f), -(1.7364503467632249f), -(3.293141634231896f), -(1.5873124760894073f), -(2.296608517111626f), -(2.1395848305595f), -(1.6562509370201062f), -(3.2726802792154115f), -(2.0600916195241705f), -(1.6841173551445205f), -(1.8502083627850707f), -(1.523221831623751f), -(3.001553951538957f), -(1.4684896158294627f), -(3.262068636409913f), -(1.493448151875884f), -(2.118251105821112f), -(3.277891656147067f), -(3.633849938402186f), -(3.2817123282667f), -(2.0385774691410194f), -(1.8546122658169326f), -(1.7879445740444613f), -(2.7581757863566936f), -(3.028764878197408f), -(2.1943894508358137f), -(1.5518895804966473f), -(1.7251349539043697f), -(1.4586615447233329f), -(1.4333767182907522f), -(1.7983752764362306f), -(2.4283487559423964f), -(1.9092875515587344f), -(1.890962750664455f), -(1.7847979215362773f), -(1.528094168297093f), -(1.5990380136892417f), -(1.6907640622807882f), -(3.2270933420063614f), -(1.886202423295644f), -(1.7964334789497451f), -(1.7276444191326685f), -(2.6070313876909443f), -(1.7624488398300346f), -(3.2918137507718197f), -(1.7745029712471552f), -(3.134896245779023f), -(3.03438200169181f), -(1.9991374397700097f), -(3.2648752760593256f), -(1.5879909892546635f), -(2.5731839303253485f), -(3.2750503465653114f), -(1.5277399088523491f), -(3.0131736320288165f), -(3.1948323104858254f), -(1.9783477554705873f), -(1.555344136747081f), -(2.608332020940643f), -(3.2267424296707268f), -(1.589316299163238f), -(2.8669300688772412f), -(2.3544958344154576f), -(2.1804577953364292f), -(1.655690384064247f), -(3.2910706306073934f), -(1.477891717510574f), -(3.2866123668968608f), -(2.7407300577810574f), -(1.5993377764777998f), -(2.34156576665078f), -(1.8066056204799628f), -(3.2513884621336167f), -(3.2631140580296343f), -(3.2687585062795024f), -(1.7294054701395896f), -(1.5493843085924912f), -(1.5183304131766096f), -(1.8232193006432453f), -(3.1107149929853772f), -(1.7984072886242852f), -(1.832253669474957f), -(3.2847301197014005f), -(2.842459048573238f), -(3.2791846518676393f), -(2.4787687231060826f), -(3.078682676486571f), -(1.7548870004988129f), -(0.5169850782611882f), -(1.0062466964735421f), -(0.2164486603236843f), -(0.9160353978060817f), -(0.2089204126102632f), -(0.2075523244290549f), -(0.862839011851815f), -(0.47323857001016f), -(0.589223841840965f), -(0.7748001957321509f), -(1.0701968115982676f), -(0.5807397817647053f), -(0.7758508161438278f), -(0.20437244425859036f), -(0.9785516000793919f), -(0.19609676925826358f), -(0.8896987768357223f), -(0.5804294036847615f), -(0.9764937938054381f), -(1.0797425158806446f), -(0.681566164270865f), -(1.0156647298155121f), -(0.1988501394884811f), -(1.0717663281830783f), -(0.6238185929989599f), -(0.6056930468367948f), -(1.1024724107067527f), -(1.0446138957364215f), -(0.973236132002077f), -(0.553569230973022f), -(0.9615570294644702f), -(0.998431635859777f), -(1.1205202767650504f), -(0.7898426085926087f), -(0.9553867008381903f), -(0.2012483574168895f), -(1.0680721909341855f), -(0.9877231957685786f), -(1.0974777788330203f), -(1.0490775001943746f), -(0.8431898585106445f), -(0.18153961185516362f), -(1.1302720729373f), -(1.0893006522004751f), -(1.1221411701208033f), -(1.0476719036683504f), -(0.7018409068596911f), -(0.7766373496175683f), -(0.1778464960559325f), -(0.7796796520017828f), -(0.6485732287050855f), -(1.0898734609108476f), -(0.9139778203688703f), -(0.19354223921643723f), -(0.7871444572449503f), -(1.1009415967757068f), -(0.7087625972133269f), -(1.073342116610367f), -(0.9072085269866258f), -(0.1860333894603923f), -(0.47730866014399415f), -(0.8194934864045782f), -(0.9978090129985403f), -(0.8764211812247034f), -(0.8144124141448494f), -(0.2295244759881281f), -(0.21461307116148742f), -(0.6794428068481067f), -(0.22347438293506486f), -(1.1109971469499766f), -(0.5208097860496552f), -(0.6208964887002066f), -(1.1343434982901044f), -(0.6560873046966715f), -(1.0858601121430458f), -(0.21761939559146115f), -(0.8172607626294406f), -(0.2041581875410266f), -(0.6091458896301652f), -(0.8040493710555676f), -(0.9987445404411963f), -(1.1014064480842776f), -(1.1043049772342295f), -(0.5896761123278009f), -(0.912427816052171f), -(0.9949481726016707f), -(0.6054638167087876f), -(0.9910537314915853f), -(0.5479166213889111f), -(0.2131700359814088f), -(0.21248278750506888f), -(0.7960351662703389f), -(0.6758232061386988f), -(0.7951816934099994f), -(0.2087383811622787f), -(0.5891408561641087f), -(1.1398899724601925f), -(0.7896486970915394f), -(1.1173652192012336f), -(0.20406610777769682f), -(0.7898557568828011f), -(0.20484487869392803f), 0.706817078230772f, 0.8160937349874312f, 1.0601025722448414f, 0.8640011831601608f, 0.6631403503947413f, 0.6384030856504247f, 0.9244657909334743f, 0.7779877028343729f, 0.8992622380511044f, 0.4268428444859548f, 0.39003066077180615f, 1.0799392746163012f, 0.9600343254019279f, 0.43758227012069223f, 1.103019424961691f, 0.2799032390274818f, 0.9917689401170765f, 0.4466618787153861f, 0.4290855424587461f, 0.9437182748497175f, 0.9563267979836769f, 1.026425891110259f, 0.8686496055304069f, 0.971345205135014f, 0.34967245361370014f, 0.5919035784669477f, 0.3870912207444773f, 0.9737778659261654f, 0.8584596712023242f, 0.8381844557653213f, 1.0480291021559527f, 0.8348566901021037f, 0.5356434308655639f, 0.7096893898213914f, 0.2846162445409388f, 0.8308244870103638f, 0.7102573500032078f, 0.5567166092666809f, 0.3214432381101406f, 0.509051765546895f, 1.0707248507353684f, 0.3415558496545589f, 0.8070706199688036f, 0.701918444886533f, 0.4450713574567036f, 0.9189895882077161f, 0.6259172392390442f, 0.6736616068143034f, 0.6706000861237211f, 0.9748020526059331f, 0.8889684954923316f, 0.3421858556223759f, 0.4871618332001432f, 0.8515239715035268f, 0.3320499925981992f, 0.5074277653083922f, 0.4748248494270737f, 1.049586195417425f, 0.5320858537118738f, 0.9650809532978021f, 0.3202264900740899f, 0.41125676416197615f, 0.7688019057163024f, 0.5404042025817142f, 0.7264771106547673f, 0.8154038717454376f, 0.8322731446884996f, 0.8881532485712271f, 0.35052168197146893f, 0.7943061822258562f, 0.8850229781906187f, 0.693794801443532f, 0.40413738024596185f, 0.4674019828939785f, 0.6978993765759678f, 0.7004360436635602f, 1.0579230525342045f, 0.7728470452978609f, 0.7540999972584527f, 0.40501632374759294f, 1.5853538089475545f, 1.5770106107563553f, 1.5598717313603787f, 1.5898720797622325f, 1.6292982037651653f, 1.5691363519131973f, 1.6176166377399637f, 1.5218505772854192f, 1.5932163231536012f, 1.5784014592956714f, 1.5093376155606402f, 1.6792070211451144f, 1.5363194536638536f, 1.5787045703806168f, 1.5962207081827682f, 1.5986251287660402f, 1.5645279203519356f, 1.586218372606111f, 1.5819948196531244f, 1.6806190773012117f, 1.5827820969729993f, 1.5975113308821618f, 1.524031387526833f, 1.545098880858098f, 1.5141463112871834f, 1.609571755324391f, 1.5983015611899831f, 1.5723788100355722f, 1.6821361650788746f, 1.564867954891716f, 1.6296657891371564f, 1.6125299117698797f, 1.5784646691597883f, 1.6111902722800568f, 1.6037298605510424f, 1.6068528653475047f, 1.5054943339338236f, 1.5533621282861452f, 1.58132786498998f, 1.5837965716605389f, 1.5786855077953554f, 1.579633552201798f, 1.5771196774065823f, 1.6128702899568077f, 1.5924363621880824f, 1.5888705012041178f, 1.5801798755313055f, 1.592989207650981f, 1.5683393516172826f, 1.5929472752815692f, 1.5546873956631528f, 1.5784937582271483f, 1.5925246543272746f, 1.5927436993033885f, 1.5944243724627172f, 1.5967099931127666f, 1.5961377467580478f, 1.5987915284321186f, 1.598417220521354f, 1.6027991129372507f, 1.6020712242608006f, 3.285915376015305f, 2.466085676142615f, 1.947001747219277f, 2.7515957758230316f, 3.2889868172094423f, 2.3335378190978853f, 2.2537875344562206f, 1.99776926762549f, 2.5028488603971626f, 2.545659854348717f, 2.153716298675851f, 3.2777845838929474f, 2.8381554917039087f, 1.9370273918516454f, 3.2884777394048683f, 2.367852789888701f, 1.9647922624483636f, 2.095200902834926f, 2.081985877092737f, 3.253287689168654f, 3.293261639934379f, 3.25144590494823f, 2.10070321715275f, 2.404403875556626f, 2.017322118592731f, 3.2725559811109286f, 3.2617978775063103f, 2.549794079900944f, 3.241672035544172f, 2.7652418340818308f, 3.2325171087600024f, 3.068908568848966f, 2.880180883001508f, 2.03485307098351f, 2.279185900898465f, 3.1857858958309366f, 3.238242847026409f, 3.28333854318139f, 2.6721263417771812f, 2.9959274425954057f, 2.0580420758337272f, 3.2791973893622033f, 2.0723189576366408f, 2.08049684922805f, 2.384626251254376f, 2.479005980741534f, 3.242879506391969f, 1.9194974699741207f, 2.371821874883815f, 3.146599706901065f, 3.2910783235468877f, 1.9942406371323163f, 2.621858228499614f, 3.254572831753591f, 3.2872958650803383f, 2.4185962675824855f, 2.956697744797069f, 2.2739841663328217f, 1.912099445599561f, 2.683346150737534f, 2.0787746764062955f, 2.0625261351934077f, 3.1340233022414186f, 3.2850491296369175f, 2.1966147367753956f, 2.3352280396754366f, 2.3547164625802597f, 3.2593088454358807f, 2.1476070747503604f, 2.085496539469627f, 3.2325140098370926f, 2.5142781807346f, 2.4058944855187088f, 3.290030471513966f, 2.0581869340402856f, 2.188744648336261f};
  CopyArr<float >(xs__ANONYMOUS_s157,_tt25, 515, 515);
}
void glblInit_ys__ANONYMOUS_s160(float* ys__ANONYMOUS_s159/* len = 515 */) {
  float _tt26[515] = {-(4.46182650926705f), -(2.416159868364749f), -(3.6447617200692717f), -(2.135912898864193f), -(1.1209922383941677f), -(1.1704217127220968f), -(0.5842622994696742f), -(4.410235422440607f), -(3.0772961728262067f), -(3.0456800850257837f), -(3.762118831150638f), -(3.724437831289725f), -(4.39999080777165f), -(2.911992601747331f), -(2.5371427871837735f), -(2.2035179718432967f), -(3.73161954445655f), -(1.0502391648005087f), -(0.32213882701078334f), -(1.7917365849980884f), -(0.3661062274814765f), -(4.417481921346701f), -(3.46689041388597f), -(2.93122503894182f), -(2.6088978803166243f), -(2.819802422768327f), -(2.5594192046080813f), -(2.353131034360623f), -(1.8084393869053552f), -(2.145841059340938f), -(1.6952189355201166f), -(1.6280446771869082f), -(0.49105594293050153f), -(0.3824781669891993f), -(1.6829968855422472f), -(0.4733545227258119f), -(1.5809315343990424f), -(4.24687283564015f), -(3.4426947389465106f), -(2.961202565408563f), -(2.6656895139758556f), -(2.400977655123452f), -(4.324045012773617f), -(3.13588710330111f), -(3.4752507064854914f), -(2.6742697862719127f), -(2.869288981037034f), -(2.0336439671562934f), -(1.8221943618857717f), -(0.389998796849492f), -(4.348911188206217f), -(4.279153596120033f), -(3.047181718189382f), -(3.3875960552385522f), -(2.6077012081366875f), -(2.719868294558596f), -(2.335720298587271f), -(3.051178281290567f), -(3.41180272180569f), -(2.6721050102086386f), -(3.0663227847770265f), -(1.8412160386930068f), -(5.862239349197662f), -(5.2838927521368415f), -(3.4541438863886382f), -(2.365114029496826f), -(0.9176236164339522f), -(0.20337210266068928f), -(0.4831623554720192f), -(0.159607713043739f), -(1.342615995449503f), -(1.643096666535559f), -(1.1013608840418652f), -(0.5290190218567385f), 0.47687931242532633f, 0.07076561872716625f, 0.4155343204045667f, -(0.4280575512840499f), 0.0742373640838927f, 0.055760769530301846f, -(0.6403478363639519f), -(0.4842592751808057f), -(0.2662660256342629f), 1.2644184274301675f, 1.4088015946315111f, 1.4674520561395814f, 0.2426173907018252f, 0.6951317497393772f, 0.28698864785464384f, 0.0270906897795955f, 0.2917700258590138f, 1.1089053370685809f, 1.312898761572543f, 0.36680032568308474f, 2.2547732101132034f, 2.105890516442622f, 1.9330850262667165f, 1.9530700199878255f, -(0.054308181311256254f), 1.6426275151771557f, 0.6307093432799639f, 1.037897655300811f, 0.5200142362218632f, 1.2157833382811318f, 1.1694641855770576f, 1.1614833859366045f, 1.112704464655034f, 1.0217019065580386f, 2.7876965720715083f, 2.499047150288041f, 2.139630726683006f, 1.390640659952805f, 1.9264247720362646f, 2.584972184799761f, 2.1369615770562462f, 1.2474814346058238f, 2.4056867241250783f, 2.4926808364969015f, 3.16365455076886f, 3.102429022685601f, 3.045339603360448f, 2.89252825988502f, 3.4425993400050285f, 3.5057966476533595f, 4.192654081636591f, 3.3870585147547487f, 3.363952796893042f, 3.3492890605487626f, 3.3952848615867506f, 3.4318099643677167f, 3.4259211981747453f, 3.3637731869372387f, 5.89039108635045f, 5.60280198321964f, 5.887842391586432f, 5.891697540914846f, 4.181102514294345f, 5.249063985526178f, 5.86617115530985f, 4.197865586916745f, 4.667704090781167f, 3.7772856371880725f, 4.052304204726422f, 5.2632625371473125f, 4.859009905246743f, 4.561767888722397f, -(5.750730034129827f), -(5.897901068861379f), -(5.775496404689501f), -(5.419896281102704f), -(3.6711916681940773f), -(4.963805349620106f), -(4.89204727681138f), -(4.754045000702315f), -(3.6719099698196866f), -(2.293192277090733f), -(3.353320058200026f), -(3.908390059884762f), -(3.077027776998022f), -(2.7865801421692136f), -(3.2661838078056773f), -(2.7385303275474264f), -(1.7207470475974285f), -(1.0810952604499935f), -(2.9406373062095486f), -(2.8321303486382297f), -(2.227709394103727f), -(1.8230504573373958f), -(2.0746956399401215f), -(0.7707751261722232f), -(0.11558361365889591f), -(0.5296710501637005f), -(0.18593645883179766f), 0.1754155276420834f, 1.1542671576861272f, -(0.19610432954421098f), -(0.3923916210014491f), 0.2962204815888092f, 0.16831037339008809f, -(0.1753765639386441f), 0.82511914327004f, 0.888420237977075f, 1.0059873613372523f, 0.9282934378872572f, 0.9211186915186096f, 0.8928608074739455f, 2.4284514768652614f, 1.9937886639577542f, 1.2127169177457442f, 2.0792576455286045f, 3.1779252148014683f, 3.226199745534834f, 3.246450089471185f, 5.894388061372574f, 4.6080932755182875f, 4.301930809067295f, -(5.902311308724603f), -(5.448506056245088f), -(4.735195789570671f), -(4.436360308336794f), -(1.7819375330794989f), -(1.004224646027152f), -(2.2742851010821905f), -(1.8787138818340836f), -(1.782929328362739f), -(1.0405497351017783f), -(0.4845145841599135f), 0.06475466158937071f, -(0.3719110674753724f), -(0.15944028705360636f), -(1.0461776066350754f), -(0.9471225415972109f), -(0.20281999133601503f), -(0.25736274182706603f), 1.2990482228883051f, -(0.35409100638727464f), 0.12677170072561705f, 0.021251928528432853f, 1.620817545212914f, 0.13744956326426128f, 2.4111674432546693f, 1.6413407144320558f, 1.0309154297315057f, 3.2283445819243624f, 3.2133679844056333f, 2.7366245711061206f, 1.3500603435118472f, 1.451497746379674f, 1.5148000293247768f, 2.810881947597868f, 2.548678663104047f, 2.929310210242769f, 3.1555397476596356f, 2.7863211954315843f, 3.560012435007957f, 3.535778567707969f, 4.071112056703788f, 4.029587194725826f, 3.4182078809631324f, 3.433813592127791f, 3.4602628226821115f, 3.477392603272837f, 5.901496070197716f, 5.446418716602294f, 4.310788915436299f, 5.839634433405298f, 4.5810146260361f, 5.2088994474426915f, 5.870496742811424f, 5.830529854406116f, 4.587191888016979f, 4.813798580472136f, 5.194272472954302f, 5.115250924961403f, 4.426002603139774f, 5.44589382682815f, -(5.215148355942121f), -(5.8390901478997765f), -(5.325876346634867f), -(5.187366698977866f), -(5.3201872137206205f), -(4.545204379878386f), -(3.4058661528436107f), -(3.6654031062531f), -(3.001983327485447f), -(2.644557450264124f), -(2.4744825266151147f), -(2.597768531434147f), -(0.8296531484459159f), -(2.1076805811158796f), -(0.5171738286489007f), -(0.6347239128647428f), -(1.9669282409178739f), 0.9126731214041065f, 1.1353246133720998f, -(0.45750119561753644f), 0.3285357611065249f, 0.4777085076758314f, -(0.1549372243134738f), 0.2591342440509881f, 0.38666118328227483f, -(0.018799923117803763f), 1.2858366298215138f, 0.9300601302053264f, 0.9143739980688836f, 0.8590158910950745f, 0.8953634904480139f, 2.7587728871651f, 1.8391542696171985f, 2.2183695654782247f, 2.7296274294648777f, 1.922649680162061f, 3.3688213951827164f, 3.882359000832454f, 4.877653184493513f, 4.132848330453897f, 4.4989106282680345f, 3.658258352591586f, -(5.0152804227045715f), -(5.55654820380806f), -(4.812468853835404f), -(3.1259837026017676f), -(2.2720209942306235f), -(0.9075582126543545f), -(0.234488897545841f), -(2.604891579707226f), -(1.8711247187063391f), -(1.7087396895900213f), -(1.6234942323621468f), -(0.4303476846464689f), 0.3476143518421075f, 0.05000816945503539f, -(0.4593975688576557f), -(1.0165325764921445f), -(0.3805424915827409f), -(0.082290606279303f), 0.7395821216067819f, 0.49101153607644077f, 1.4452607226313963f, 3.0928158098104768f, 2.327534216771647f, 2.6736853156260096f, 2.187273919291587f, 3.286887716040531f, 3.066795788224955f, 1.4958906070590732f, 2.235971208081459f, 2.474461848970556f, 3.3594807508635167f, 3.1021341691923836f, 3.1985294265276134f, 4.717832154690409f, 3.9645261370463807f, 5.903468646287975f, 5.4166222631277465f, 5.15141537085281f, 5.898820782255501f, 5.460060852765276f, 5.714532628484946f, 5.9030319715821085f, 5.660116996890868f, 4.885274392841787f, 4.596279441812308f, 4.0728569688708856f, 4.498709593940119f, -(5.766491935383398f), -(5.348003129406724f), -(5.386254442622185f), -(3.3802649816789145f), -(5.307087094390268f), -(3.5500081564509425f), -(2.96072098935939f), -(2.638041392251947f), -(2.067505102359078f), -(2.3111539641554626f), -(0.7681290699000937f), -(1.7905088390954371f), -(0.14400468051690507f), -(0.6327879321637392f), 1.0045599455747944f, 1.4405143624962342f, -(0.16615059408246446f), 0.12292484069307918f, 1.1620822138919964f, 1.2323423543772776f, 1.313209405003626f, 1.4057154261797755f, 2.71850226082027f, 2.27559581117083f, 2.583970114540765f, 2.925260360510021f, 3.0177141113298216f, 5.59752733753371f, 5.839914084036333f, 4.072792590423871f, 3.9064452509669483f, 3.7547109113036825f, 3.6900146095299116f, -(4.994402834869302f), -(4.367141896013218f), -(4.8121647317709275f), -(3.0474541333938645f), -(0.0833431841157043f), -(1.5021978584221887f), -(0.2225273195254892f), 0.04926828512806336f, -(1.7054140380017453f), -(1.6035809308491293f), -(0.36637980031923245f), 0.2441584050362891f, 0.556005390509729f, 0.18359245870746088f, -(0.31163067062369526f), 0.12119541096620523f, -(0.5005538781423708f), 0.7968094000227299f, 0.5088705005499672f, 2.1827570363987796f, 1.2640016412766397f, 0.41372711056804673f, 3.0359214030191217f, 1.110465048938612f, 1.065312239411781f, 3.395278624469866f, 1.5161443962045653f, 1.428688031761538f, 3.1916029462007485f, 2.7068435925615946f, 3.4595227972372005f, 4.372934933204387f, 5.480507922782569f, 5.685067332082789f, 3.923602056686781f, 3.934431299927165f, -(4.816048673960039f), -(4.8105259078381115f), -(5.291893272935704f), -(3.287789916194892f), -(4.929099205371662f), -(3.407074174679627f), -(2.3109545376449994f), -(2.0621097940459463f), -(0.6671893674239293f), -(0.25547397003095934f), 0.25328517392153793f, -(1.0919097870441714f), 0.5015622019337616f, 0.5532503494639076f, 1.5765847056113163f, -(0.11905489134498938f), 1.9979238447498395f, 1.3921682423871184f, 1.4075020651440497f, 3.2010371726272417f, 2.4866541541067186f, 2.2464868430887464f, 3.823004184720059f, 3.9338422824986736f, 3.7646950853508603f, -(5.902333482067455f), -(5.098690466706692f), -(4.688685307199519f), -(2.920009307319565f), -(2.7563143840727595f), 0.09106645857409346f, -(2.982804306119791f), -(0.3396006903319624f), -(2.248302650261196f), -(0.41808867759212043f), 0.551240022902469f, 0.9000902539909159f, 0.38470551025477334f, 0.1661815050604935f, -(0.6729501762630086f), 0.07577064192824912f, 0.020957227029542613f, -(0.4930066574108002f), 0.6711106457457714f, 0.7763472712687759f, 0.7053886065673832f, 1.537350226830774f, 1.2476754858287618f, 0.135525314401567f, -(0.07836956398261577f), 0.6108720128674655f, 2.416249096913149f, 1.58620831625786f, 1.40618465537145f, 3.1354579045577826f, 3.294474747545049f, 2.6503818356532074f, 3.2131256288150927f, 3.251209907357995f, 2.8467638003925533f, 5.594672587783613f, 4.4764236817383924f, 5.884647192694103f, 5.124571290596467f, 4.147796200866994f, 4.046514911216069f, -(4.910291670872822f), -(5.883284142980507f), -(5.20243946719655f), -(2.983757183231684f), -(2.3079292328576444f), -(2.813026625378365f), -(2.989486897359475f), -(2.433578287067985f), -(1.6662977225645546f), -(2.326948598390176f), -(3.11298793816922f), -(2.010033299744754f), -(1.176725010706787f), -(0.7581296559334216f), -(0.35110128577818017f), 0.3801554110307379f, -(1.9263157283274097f), -(2.117137421158615f), -(0.46142854302310066f), -(0.16750319006891357f), -(0.02725342410760989f), 0.2451279679947873f, 0.9179321804841913f, 1.3442958195026238f, 1.8377471945354769f, -(0.290611009563985f), 1.1586714721776579f, 1.2711669448296126f, 1.3797169890708187f, 3.0995553124378072f, 2.612258640973266f, 2.5410100490472223f, 4.803636422960763f, 4.040094214565635f, 4.028999885226006f};
  CopyArr<float >(ys__ANONYMOUS_s159,_tt26, 515, 515);
}
void glblInit_zs__ANONYMOUS_s162(float* zs__ANONYMOUS_s161/* len = 515 */) {
  float _tt27[515] = {-(1.2771672941440373f), -(1.5287924830044495f), -(1.3702710759122265f), -(0.9759127376488935f), -(1.2494781460762274f), -(0.10589480744640875f), -(1.158201706881203f), -(0.5163224160281582f), -(0.054937736145645184f), -(0.3616014475409084f), -(0.6689637507891111f), -(0.32727815939909505f), -(1.2697098613142488f), -(1.2669389619280045f), -(0.6494307784220158f), -(1.376317009696534f), -(1.5765183461975532f), -(1.6051886871243675f), -(1.7807190236955177f), -(1.0298010455583229f), -(1.4779562491473248f), -(0.5420756412400285f), -(1.409556990218233f), -(1.2571548728028834f), -(1.4465678452036355f), -(0.7669244491986373f), -(1.0729627807258704f), -(1.2844355293015224f), -(1.8950729177318473f), -(0.9498001476516016f), -(1.5978781202564716f), -(0.31714151992359657f), -(1.427174440456176f), -(1.8196508956467798f), -(1.0792370841900434f), -(1.314164649691353f), -(1.392823426903317f), -(0.7987569299520725f), -(0.5538737956021711f), -(0.4878573002039084f), -(0.3569130347877001f), -(0.2750532135554816f), -(1.3789155125823442f), -(0.8972965912603745f), -(1.06258587977685f), -(0.7669161445787824f), -(1.303132447457815f), -(0.9434979494725041f), -(0.4393903958786512f), -(1.0082566089801097f), -(0.4949475105273836f), -(0.9570100185460217f), -(0.31305858227127453f), -(0.5662590570590736f), 0.19191817066477931f, -(0.3728104372081543f), -(0.2740023305723659f), -(0.9274576698085538f), -(1.026496024112168f), -(1.14787824828394f), -(0.5440466356953163f), -(0.12166564090269343f), -(2.451294886361728f), -(1.5634386153577424f), -(5.94216721870029f), -(2.2268653577618207f), -(5.370919980826101f), -(5.998190499989797f), -(5.096733767381166f), -(5.825855382336982f), -(3.2100763490532387f), -(1.4243647619931625f), -(2.0329875990851463f), -(3.875693320870572f), -(5.8193814410253495f), -(4.326800324162445f), -(4.747771026711208f), -(3.076385107301361f), -(3.9015682701554426f), -(3.1727193593448586f), -(1.282031373435584f), -(0.21618616936521723f), -(1.5814495387654768f), -(4.730195468998937f), -(4.999638707943863f), -(4.453358483654504f), -(2.706335386757253f), -(2.8263877118323246f), -(0.9965717283653716f), -(1.918187893006508f), -(1.398876028225922f), -(2.6779014158888463f), -(3.679672048106744f), -(2.6778131989421605f), -(5.615581188302295f), -(5.974856691944717f), -(4.185625447254051f), -(4.6032035030165455f), 0.2948591904005886f, -(3.4827789195381134f), -(0.043980825540250734f), -(0.4352591080441034f), -(0.703773486644469f), -(2.1837084399187723f), -(1.8056841653061924f), -(1.504751445999439f), -(1.8522306976387468f), -(1.5230672889200723f), -(3.756589172284634f), -(4.316539508086196f), -(2.375346756003059f), -(0.30954712895664377f), -(2.3861713534565663f), -(3.2729528006131905f), -(1.4183566246390105f), 0.7916743384701735f, 0.3332877588216068f, -(0.489582419569636f), -(1.6868662337205798f), -(1.2409510886757393f), -(2.626329486287562f), -(1.5358265801269693f), -(5.177994213250426f), -(3.7635937602123066f), -(5.991035119591883f), -(3.160648329225218f), -(2.6882720429903135f), -(1.6030927252074925f), -(0.7500559712219863f), -(1.7577186477024744f), -(1.3691884347736505f), -(2.58991909749928f), -(2.4824584461681325f), -(5.680072344542301f), -(3.033801518368245f), -(1.9873280518384293f), -(3.167684327179174f), -(2.8296375500640893f), -(0.7211001777984087f), -(1.7201186052578188f), 0.6758604863000305f, -(0.4360629049818971f), -(2.4630135509010964f), 0.24999216136478816f, -(1.3584475646314909f), -(0.6624487107226313f), 1.5357062115413525f, 4.613476769017299f, 3.4834299392469967f, -(0.9661608281554328f), 0.5381353050808128f, 5.999958405814324f, 5.180764619212447f, 3.8641245667355304f, 1.6048594485661172f, 0.36251236962874245f, 4.759129131103784f, 4.820705407119105f, 5.269488845098007f, 3.265780218690421f, 4.986719648812858f, 4.62469666106879f, 1.226567231755865f, 0.7053042411116324f, 5.991052898878543f, 5.997801676804347f, 5.99389586967981f, 4.714825725461674f, 4.689167718286302f, 3.5498463530376365f, 2.3975187982890027f, 3.8897097344969294f, 3.6924645226225956f, 0.9603708558195512f, 1.095303784249089f, 5.686110405345722f, 4.533430429939735f, 4.70474147991218f, 3.732132996939223f, 4.5119211442094525f, 4.637026976163729f, 4.23607109145941f, 1.6580732070122017f, 5.889178954395656f, 4.764946088063873f, 4.329398751630723f, 5.219297455003223f, 4.382432381245587f, 4.779005533938012f, 3.4479442880941513f, 5.100228886606233f, 4.196942746102969f, 2.403007563486078f, 3.845304661717324f, 2.787206486772285f, 2.5439957009672582f, -(2.1613261321815656f), -(1.6425910199508633f), -(5.663987658746744f), -(5.967510806939161f), -(5.383485772024134f), -(4.894790558987325f), -(2.8688005549188818f), -(3.5972281817593945f), -(2.391958146446254f), -(3.652191423715908f), -(5.933463724633714f), -(5.998825196296737f), -(4.976499374445928f), -(5.356362398319109f), -(3.0808809347483233f), -(2.8311141836066347f), -(2.370866895631362f), -(2.740309434011756f), -(5.951121011165584f), -(4.551348740159123f), -(5.029101458639204f), -(3.0090829487741355f), -(5.878201390338072f), -(2.2593176297505555f), -(5.9983534229343505f), -(5.110571497066825f), -(1.2580943866436063f), -(5.323796218668586f), -(4.339100159299217f), -(4.639654588277824f), 0.16415826338190417f, -(0.3827096846687308f), -(1.0104679365419296f), 0.40379798800486655f, -(0.508475645606938f), -(0.6988609388207989f), -(1.0486033308500382f), -(1.2154751343827757f), -(5.15125378335635f), -(4.119969345997435f), -(5.617752321551372f), -(4.046328191327432f), 0.3132031996886868f, -(0.21607693990484353f), -(1.3098265460005405f), -(1.798427342848342f), 1.7654737371060607f, -(5.726937837954713f), -(4.063776347250127f), -(2.361937770470422f), -(3.2425532545882936f), -(2.871885803638584f), -(0.755202305914327f), -(0.7594134306403818f), 1.1554046179482036f, -(2.069141140989711f), 0.2055528771221992f, -(1.3589765702593286f), -(0.7872109206179945f), -(0.6927950214239463f), 1.2344165314454472f, 4.48295858526719f, 3.4443138452960476f, -(0.8957383365927917f), 5.6692650292331725f, 5.758731676086734f, 3.1569250509320805f, 5.8423738748641485f, 4.1450214052447425f, 4.601455664701085f, 4.495024330602475f, 5.999787322583251f, 5.155033871725024f, 5.1885896696966505f, 4.513561586224745f, 4.910747257960121f, 4.570909584444341f, 1.9431541788433357f, 1.168351539518227f, 5.88133185125015f, 4.677561039593962f, 3.2285497396478195f, 4.517286442150052f, 4.319238534952889f, 3.8961578830358654f, 4.183594163811477f, 5.910247853356766f, 4.780182019856346f, 2.965367685665088f, 4.475457589804787f, 3.794372238807114f, 5.311252005301199f, 4.8694139352825525f, 2.452899465931206f, 4.626645968312845f, 4.214688262749422f, 2.208428061648239f, 5.680459252491376f, 3.127255649439424f, 4.279661555179842f, 2.7082631364227345f, 3.829034024350736f, -(2.6633514184531437f), -(5.998599820769512f), -(1.4852427727603252f), -(3.2803511746273935f), -(5.736648882286399f), -(4.761472022506731f), -(4.8759933059358485f), -(1.9918531135666333f), -(3.3527220336838304f), -(2.5741164231413065f), -(3.0842581745967164f), -(4.151050660626805f), -(5.993112944046082f), -(5.608399460063803f), -(2.3197358772303045f), -(2.709449538739113f), -(3.373709199217713f), -(2.870665581926483f), -(5.840183773694133f), -(5.116311421775507f), -(5.409465950684991f), -(5.891353296558189f), -(5.486790211636062f), -(4.5392585332539355f), -(5.019509077361974f), -(4.973244417203567f), -(4.555003866172026f), 0.26940179170475453f, -(0.6463927047874798f), 0.48504083246648344f, -(1.688738335367605f), -(0.4344818652268547f), -(1.0321029714924295f), -(5.950510146020798f), -(3.964482825666973f), 1.64326626390155f, -(4.80299569859556f), -(3.80965952304471f), -(1.8164213166380394f), -(2.1485474937393167f), -(0.5887206856854472f), -(0.8998775373680217f), -(1.1977973870532412f), 0.9859245065247401f, -(2.360262660445119f), -(0.31129447265182925f), -(1.1273993708006116f), 0.34620703802685227f, 3.8813611217399213f, -(0.9896268233307819f), 0.2174985188820452f, 5.983094832137434f, 4.493563070161234f, 5.988684687717662f, 4.3860403575978095f, 4.617654211668262f, 5.998263421652675f, 5.817875619119992f, 5.044872641400746f, 4.349640665983779f, 4.904943503109572f, 1.8874644098815094f, 1.177454807970408f, 5.651609725323918f, 4.65602183026147f, 5.994127166617095f, 4.804078164943602f, 3.2784285313518615f, 4.000462272722589f, 5.2938978885872325f, 4.622167473369596f, 2.5608935013065115f, 4.4987014906713805f, 3.852441443086468f, 5.8797568830309554f, 4.377268321521249f, 3.6626741066182977f, 3.082997120327705f, 4.00775109948671f, 3.681399379686759f, -(3.8114814649477293f), -(4.835681070642446f), -(1.5032715446030047f), -(3.1390328939898846f), -(5.782022559492755f), -(4.38396274989638f), -(5.35542584856382f), -(4.872120476847346f), -(2.952483490090564f), -(3.463434746673467f), -(4.04328956609759f), -(5.935114056320884f), -(5.879423565764071f), -(4.492590728426373f), -(2.138328199894536f), -(3.100620970447741f), -(1.7123064581316447f), -(5.333444878648594f), -(4.8126745495228285f), -(5.999201693452903f), -(5.160721278973702f), -(1.7760747704372795f), -(5.585380929158139f), -(1.220081558774398f), 0.012341790466089946f, -(4.931650139866413f), 0.26913458805621165f, -(0.9009299159406954f), -(1.6867127181902022f), 1.120275036016721f, -(1.6092332533185396f), -(5.233763720936459f), 2.0933642743313663f, -(1.2195105156922348f), 1.1166282182245393f, -(1.791375438929648f), 1.2619215493834341f, 3.9328911758234457f, -(1.0774276039865158f), 0.4181583941854781f, 5.813389655064613f, 4.613919110565935f, 4.98814018381357f, 5.83129101370036f, 5.747929870148376f, 4.0917008402821935f, 1.5436829867384707f, 4.242592088339386f, 3.511998870132237f, 2.533009715317669f, 1.1157101913420957f, 5.467969812720628f, 5.962146661337305f, 4.592755462872915f, 3.184743796474038f, 5.249084616435166f, 4.277513994977859f, 1.455497539774968f, 5.307676360206689f, 3.5177634245556426f, 2.2026062167296354f, -(3.2728751110233327f), -(5.991264771991676f), -(1.488079743437765f), -(0.8987128595416917f), -(5.568650332638734f), -(5.141352343727217f), -(5.582608950323723f), -(4.323851442661724f), -(1.5701318683009515f), -(3.5582232162994254f), -(5.99377210289623f), -(5.887406103045036f), -(4.169644359626922f), -(4.3432278041218275f), -(0.7997732395620645f), -(2.2126912721917598f), -(3.9659762847318696f), -(0.8233562706716799f), -(5.054852358088393f), -(3.7947234816760385f), -(2.629098340579206f), -(5.977728886039175f), -(3.9780683182193313f), -(0.6416655690206797f), -(0.30821336907744074f), -(1.000820863072876f), -(4.483612703641035f), -(3.5089068683994964f), -(0.23309887132898033f), -(3.8293106019743455f), -(2.7803269361087857f), -(0.9594723527520466f), -(2.2075496476958185f), -(1.6950218910947294f), 0.469225876399797f, -(5.996611900563497f), -(4.497856694806569f), 0.9824992009717295f, -(2.9117889054425383f), 0.8962115889979658f, -(1.859648584724375f), 1.5241350836560021f, -(1.2987883039400683f), -(0.8697138637803956f), -(0.05648482288561037f), -(0.17195836237887696f), 3.4312475005656524f, 4.295432914623716f, 2.653694321146135f, 1.2258884491678406f, 5.1637769344143445f, 5.976020650090787f, 3.251560627237483f, 3.94176221791345f, 2.0605404691967f, 0.5467265034552675f, 0.75932544446843f, 5.800696276043063f, 5.87297808559233f, 5.531711517727665f, 3.7134211213042403f, 1.9747637888725738f, 4.479685189383839f, 2.8453957676119717f, 1.6138141219978164f, 1.1403630595425056f, 5.990635805646418f, 5.955425205364975f, 4.320449666800561f, 2.9464240224219074f, 4.852584241539696f, 3.5683044767386605f, 1.9877085554857057f, 3.8420373275026587f, 3.154382761079105f, 2.208688537695668f};
  CopyArr<float >(zs__ANONYMOUS_s161,_tt27, 515, 515);
}
void _main(int id, CuboidHint** cuboidHints__ANONYMOUS_s133/* len = 4 */, CylinderHint** cylinderHints__ANONYMOUS_s145/* len = 4 */, bool* labels__ANONYMOUS_s146/* len = 515 */, float* xs__ANONYMOUS_s147/* len = 515 */, float* ys__ANONYMOUS_s148/* len = 515 */, float* zs__ANONYMOUS_s149/* len = 515 */) {
  check(id, cuboidHints__ANONYMOUS_s133, cylinderHints__ANONYMOUS_s145, labels__ANONYMOUS_s146, xs__ANONYMOUS_s147, ys__ANONYMOUS_s148, zs__ANONYMOUS_s149);
}
void check(int i, CuboidHint** cuboidHints__ANONYMOUS_s142/* len = 4 */, CylinderHint** cylinderHints__ANONYMOUS_s140/* len = 4 */, bool* labels__ANONYMOUS_s128/* len = 515 */, float* xs__ANONYMOUS_s129/* len = 515 */, float* ys__ANONYMOUS_s130/* len = 515 */, float* zs__ANONYMOUS_s131/* len = 515 */) {
  Vector*  v=Vector::create((xs__ANONYMOUS_s129[i]), (ys__ANONYMOUS_s130[i]), (zs__ANONYMOUS_s131[i]));
  if ((labels__ANONYMOUS_s128[i])) {
    bool  _out_s2=0;
    contains(v, 21, _out_s2, cuboidHints__ANONYMOUS_s142, cylinderHints__ANONYMOUS_s140);
  } else {
    bool  _out_s4=0;
    contains(v, 21, _out_s4, cuboidHints__ANONYMOUS_s142, cylinderHints__ANONYMOUS_s140);
  }
}
void contains(Vector* p, int num_primitives_0, bool& _out, CuboidHint** cuboidHints__ANONYMOUS_s141/* len = 4 */, CylinderHint** cylinderHints__ANONYMOUS_s135/* len = 4 */) {
  char _tt28[11] = {'/', '/', ' ', 'B', 'e', 'g', 'i', 'n', '.', '\n', '\0'};
  print(11, _tt28);
  char _tt29[11] = {'u', 'n', 'i', 'o', 'n', '(', ')', ' ', '{', '\n', '\0'};
  print(11, _tt29);
  char _tt30[18] = {'i', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 'i', 'o', 'n', '(', ')', ' ', '{', '\n', '\0'};
  print(18, _tt30);
  char _tt31[11] = {'u', 'n', 'i', 'o', 'n', '(', ')', ' ', '{', '\n', '\0'};
  print(11, _tt31);
  CylinderHint*  c=NULL;
  c = (cylinderHints__ANONYMOUS_s135[1]);
  Vector*  p_rotated_s68=NULL;
  inverse_rotate(p, c->theta_x, c->theta_y, c->theta_z, p_rotated_s68);
  int  n=c->xlen;
  float*  offsets= new float [n]; CopyArr<float >(offsets,c->xlist, n, c->xlen);
  float  xl_s70=(offsets[n - 2]);
  int  n_0=c->xlen;
  float*  offsets_0= new float [n_0]; CopyArr<float >(offsets_0,c->xlist, n_0, c->xlen);
  float  xu_s72=(offsets_0[n_0 - 1]);
  float  roll_s74=0.0f;
  radian_to_degree(c->theta_x, roll_s74);
  float  pitch_s76=0.0f;
  radian_to_degree(c->theta_y, pitch_s76);
  float  yaw_s78=0.0f;
  radian_to_degree(c->theta_z, yaw_s78);
  char _tt32[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt32);
  printfloat(roll_s74);
  char _tt33[3] = {',', ' ', '\0'};
  print(3, _tt33);
  printfloat(pitch_s76);
  char _tt34[3] = {',', ' ', '\0'};
  print(3, _tt34);
  printfloat(yaw_s78);
  char _tt35[4] = {']', ')', '\n', '\0'};
  print(4, _tt35);
  char _tt36[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt36);
  printfloat((xl_s70 + xu_s72) * 0.5f);
  char _tt37[3] = {',', ' ', '\0'};
  print(3, _tt37);
  printfloat(c->y);
  char _tt38[3] = {',', ' ', '\0'};
  print(3, _tt38);
  printfloat(c->z);
  char _tt39[4] = {']', ')', '\n', '\0'};
  print(4, _tt39);
  char _tt40[20] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '0', ',', ' ', '9', '0', ',', ' ', '0', ']', ')', '\n', '\0'};
  print(20, _tt40);
  char _tt41[14] = {'c', 'y', 'l', 'i', 'n', 'd', 'e', 'r', '(', 'h', ' ', '=', ' ', '\0'};
  print(14, _tt41);
  printfloat(xu_s72 - xl_s70);
  char _tt42[8] = {',', ' ', 'r', '1', ' ', '=', ' ', '\0'};
  print(8, _tt42);
  printfloat(c->radius);
  char _tt43[8] = {',', ' ', 'r', '2', ' ', '=', ' ', '\0'};
  print(8, _tt43);
  printfloat(c->radius);
  char _tt44[29] = {',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ',', ' ', '$', 'f', 'n', ' ', '=', ' ', '1', '2', ')', ';', '\n', '\0'};
  print(29, _tt44);
  bool  withinRadius=(((((p_rotated_s68->y - c->y) * (p_rotated_s68->y - c->y)) + ((p_rotated_s68->z - c->z) * (p_rotated_s68->z - c->z))) - (c->radius * c->radius))) <= (0.0f);
  bool  withinHeight=((p_rotated_s68->x) >= (xl_s70)) && ((p_rotated_s68->x) <= (xu_s72));
  char _tt45[2] = {'\n', '\0'};
  print(2, _tt45);
  char _tt46[18] = {'i', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 'i', 'o', 'n', '(', ')', ' ', '{', '\n', '\0'};
  print(18, _tt46);
  char _tt47[11] = {'u', 'n', 'i', 'o', 'n', '(', ')', ' ', '{', '\n', '\0'};
  print(11, _tt47);
  CylinderHint*  c_0=(cylinderHints__ANONYMOUS_s135[3]);
  Vector*  p_rotated_s68_0=NULL;
  inverse_rotate(p, c_0->theta_x, c_0->theta_y, c_0->theta_z, p_rotated_s68_0);
  int  n_1=c_0->xlen;
  float*  offsets_1= new float [n_1]; CopyArr<float >(offsets_1,c_0->xlist, n_1, c_0->xlen);
  float  xl_s70_0=(offsets_1[n_1 - 2]);
  int  n_2=c_0->xlen;
  float*  offsets_2= new float [n_2]; CopyArr<float >(offsets_2,c_0->xlist, n_2, c_0->xlen);
  float  xu_s72_0=(offsets_2[n_2 - 1]);
  float  roll_s74_0=0.0f;
  radian_to_degree(c_0->theta_x, roll_s74_0);
  float  pitch_s76_0=0.0f;
  radian_to_degree(c_0->theta_y, pitch_s76_0);
  float  yaw_s78_0=0.0f;
  radian_to_degree(c_0->theta_z, yaw_s78_0);
  char _tt48[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt48);
  printfloat(roll_s74_0);
  char _tt49[3] = {',', ' ', '\0'};
  print(3, _tt49);
  printfloat(pitch_s76_0);
  char _tt50[3] = {',', ' ', '\0'};
  print(3, _tt50);
  printfloat(yaw_s78_0);
  char _tt51[4] = {']', ')', '\n', '\0'};
  print(4, _tt51);
  char _tt52[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt52);
  printfloat((xl_s70_0 + xu_s72_0) * 0.5f);
  char _tt53[3] = {',', ' ', '\0'};
  print(3, _tt53);
  printfloat(c_0->y);
  char _tt54[3] = {',', ' ', '\0'};
  print(3, _tt54);
  printfloat(c_0->z);
  char _tt55[4] = {']', ')', '\n', '\0'};
  print(4, _tt55);
  char _tt56[20] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '0', ',', ' ', '9', '0', ',', ' ', '0', ']', ')', '\n', '\0'};
  print(20, _tt56);
  char _tt57[14] = {'c', 'y', 'l', 'i', 'n', 'd', 'e', 'r', '(', 'h', ' ', '=', ' ', '\0'};
  print(14, _tt57);
  printfloat(xu_s72_0 - xl_s70_0);
  char _tt58[8] = {',', ' ', 'r', '1', ' ', '=', ' ', '\0'};
  print(8, _tt58);
  printfloat(c_0->radius);
  char _tt59[8] = {',', ' ', 'r', '2', ' ', '=', ' ', '\0'};
  print(8, _tt59);
  printfloat(c_0->radius);
  char _tt60[29] = {',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ',', ' ', '$', 'f', 'n', ' ', '=', ' ', '1', '2', ')', ';', '\n', '\0'};
  print(29, _tt60);
  bool  withinRadius_0=(((((p_rotated_s68_0->y - c_0->y) * (p_rotated_s68_0->y - c_0->y)) + ((p_rotated_s68_0->z - c_0->z) * (p_rotated_s68_0->z - c_0->z))) - (c_0->radius * c_0->radius))) <= (0.0f);
  bool  withinHeight_0=((p_rotated_s68_0->x) >= (xl_s70_0)) && ((p_rotated_s68_0->x) <= (xu_s72_0));
  char _tt61[2] = {'\n', '\0'};
  print(2, _tt61);
  CuboidHint*  c_1=(cuboidHints__ANONYMOUS_s141[0]);
  Vector*  p_rotated_s22=NULL;
  inverse_rotate(p, c_1->theta_x, c_1->theta_y, c_1->theta_z, p_rotated_s22);
  int  n_3=c_1->xlen;
  float*  offsets_3= new float [n_3]; CopyArr<float >(offsets_3,c_1->xlist, n_3, c_1->xlen);
  float  xl_s24=(offsets_3[n_3 - 2]);
  int  n_4=c_1->ylen;
  float*  offsets_4= new float [n_4]; CopyArr<float >(offsets_4,c_1->ylist, n_4, c_1->ylen);
  float  yl_s26=(offsets_4[n_4 - 2]);
  int  n_5=c_1->zlen;
  float*  offsets_5= new float [n_5]; CopyArr<float >(offsets_5,c_1->zlist, n_5, c_1->zlen);
  float  zl_s28=(offsets_5[n_5 - 2]);
  int  n_6=c_1->xlen;
  float*  offsets_6= new float [n_6]; CopyArr<float >(offsets_6,c_1->xlist, n_6, c_1->xlen);
  float  xu_s30=(offsets_6[n_6 - 1]);
  int  n_7=c_1->ylen;
  float*  offsets_7= new float [n_7]; CopyArr<float >(offsets_7,c_1->ylist, n_7, c_1->ylen);
  float  yu_s32=(offsets_7[n_7 - 1]);
  int  n_8=c_1->zlen;
  float*  offsets_8= new float [n_8]; CopyArr<float >(offsets_8,c_1->zlist, n_8, c_1->zlen);
  float  roll_s36=0.0f;
  radian_to_degree(c_1->theta_x, roll_s36);
  float  pitch_s38=0.0f;
  radian_to_degree(c_1->theta_y, pitch_s38);
  float  yaw_s40=0.0f;
  radian_to_degree(c_1->theta_z, yaw_s40);
  char _tt62[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt62);
  printfloat(roll_s36);
  char _tt63[3] = {',', ' ', '\0'};
  print(3, _tt63);
  printfloat(pitch_s38);
  char _tt64[3] = {',', ' ', '\0'};
  print(3, _tt64);
  printfloat(yaw_s40);
  char _tt65[4] = {']', ')', '\n', '\0'};
  print(4, _tt65);
  char _tt66[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt66);
  printfloat((xu_s30 + xl_s24) * 0.5f);
  char _tt67[3] = {',', ' ', '\0'};
  print(3, _tt67);
  printfloat((yu_s32 + yl_s26) * 0.5f);
  char _tt68[3] = {',', ' ', '\0'};
  print(3, _tt68);
  printfloat(((offsets_8[0]) + zl_s28) * 0.5f);
  char _tt69[4] = {']', ')', '\n', '\0'};
  print(4, _tt69);
  char _tt70[14] = {'c', 'u', 'b', 'e', '(', 's', 'i', 'z', 'e', ' ', '=', ' ', '[', '\0'};
  print(14, _tt70);
  printfloat(xu_s30 - xl_s24);
  char _tt71[3] = {',', ' ', '\0'};
  print(3, _tt71);
  printfloat(yu_s32 - yl_s26);
  char _tt72[3] = {',', ' ', '\0'};
  print(3, _tt72);
  printfloat((offsets_8[0]) - zl_s28);
  char _tt73[20] = {']', ',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ')', ';', '\n', '\0'};
  print(20, _tt73);
  bool  x_in_range=((p_rotated_s22->x) >= (xl_s24)) && ((p_rotated_s22->x) <= (xu_s30));
  bool  y_in_range=((p_rotated_s22->y) >= (yl_s26)) && ((p_rotated_s22->y) <= (yu_s32));
  bool  z_in_range=((p_rotated_s22->z) >= (zl_s28)) && ((p_rotated_s22->z) <= ((offsets_8[0])));
  char _tt74[3] = {'}', '\n', '\0'};
  print(3, _tt74);
  char _tt75[2] = {'\n', '\0'};
  print(2, _tt75);
  char _tt76[16] = {'d', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 'c', 'e', '(', ')', ' ', '{', '\n', '\0'};
  print(16, _tt76);
  CuboidHint*  c_2=(cuboidHints__ANONYMOUS_s141[3]);
  Vector*  p_rotated_s22_0=NULL;
  inverse_rotate(p, c_2->theta_x, c_2->theta_y, c_2->theta_z, p_rotated_s22_0);
  int  n_9=c_2->xlen;
  float*  offsets_9= new float [n_9]; CopyArr<float >(offsets_9,c_2->xlist, n_9, c_2->xlen);
  float  xl_s24_0=(offsets_9[n_9 - 2]);
  int  n_10=c_2->ylen;
  float*  offsets_10= new float [n_10]; CopyArr<float >(offsets_10,c_2->ylist, n_10, c_2->ylen);
  float  yl_s26_0=(offsets_10[n_10 - 2]);
  int  n_11=c_2->zlen;
  float*  offsets_11= new float [n_11]; CopyArr<float >(offsets_11,c_2->zlist, n_11, c_2->zlen);
  float  zl_s28_0=(offsets_11[n_11 - 2]);
  int  n_12=c_2->xlen;
  float*  offsets_12= new float [n_12]; CopyArr<float >(offsets_12,c_2->xlist, n_12, c_2->xlen);
  int  n_13=c_2->ylen;
  float*  offsets_13= new float [n_13]; CopyArr<float >(offsets_13,c_2->ylist, n_13, c_2->ylen);
  float  yu_s32_0=(offsets_13[n_13 - 1]);
  int  n_14=c_2->zlen;
  float*  offsets_14= new float [n_14]; CopyArr<float >(offsets_14,c_2->zlist, n_14, c_2->zlen);
  float  zu_s34_0=(offsets_14[n_14 - 1]);
  float  roll_s36_0=0.0f;
  radian_to_degree(c_2->theta_x, roll_s36_0);
  float  pitch_s38_0=0.0f;
  radian_to_degree(c_2->theta_y, pitch_s38_0);
  float  yaw_s40_0=0.0f;
  radian_to_degree(c_2->theta_z, yaw_s40_0);
  char _tt77[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt77);
  printfloat(roll_s36_0);
  char _tt78[3] = {',', ' ', '\0'};
  print(3, _tt78);
  printfloat(pitch_s38_0);
  char _tt79[3] = {',', ' ', '\0'};
  print(3, _tt79);
  printfloat(yaw_s40_0);
  char _tt80[4] = {']', ')', '\n', '\0'};
  print(4, _tt80);
  char _tt81[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt81);
  printfloat(((offsets_12[0]) + xl_s24_0) * 0.5f);
  char _tt82[3] = {',', ' ', '\0'};
  print(3, _tt82);
  printfloat((yu_s32_0 + yl_s26_0) * 0.5f);
  char _tt83[3] = {',', ' ', '\0'};
  print(3, _tt83);
  printfloat((zu_s34_0 + zl_s28_0) * 0.5f);
  char _tt84[4] = {']', ')', '\n', '\0'};
  print(4, _tt84);
  char _tt85[14] = {'c', 'u', 'b', 'e', '(', 's', 'i', 'z', 'e', ' ', '=', ' ', '[', '\0'};
  print(14, _tt85);
  printfloat((offsets_12[0]) - xl_s24_0);
  char _tt86[3] = {',', ' ', '\0'};
  print(3, _tt86);
  printfloat(yu_s32_0 - yl_s26_0);
  char _tt87[3] = {',', ' ', '\0'};
  print(3, _tt87);
  printfloat(zu_s34_0 - zl_s28_0);
  char _tt88[20] = {']', ',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ')', ';', '\n', '\0'};
  print(20, _tt88);
  bool  x_in_range_0=((p_rotated_s22_0->x) >= (xl_s24_0)) && ((p_rotated_s22_0->x) <= ((offsets_12[0])));
  bool  y_in_range_0=((p_rotated_s22_0->y) >= (yl_s26_0)) && ((p_rotated_s22_0->y) <= (yu_s32_0));
  bool  z_in_range_0=((p_rotated_s22_0->z) >= (zl_s28_0)) && ((p_rotated_s22_0->z) <= (zu_s34_0));
  char _tt89[2] = {'\n', '\0'};
  print(2, _tt89);
  CuboidHint*  c_3=(cuboidHints__ANONYMOUS_s141[2]);
  Vector*  p_rotated_s22_1=NULL;
  inverse_rotate(p, c_3->theta_x, c_3->theta_y, c_3->theta_z, p_rotated_s22_1);
  int  n_15=c_3->xlen;
  float*  offsets_15= new float [n_15]; CopyArr<float >(offsets_15,c_3->xlist, n_15, c_3->xlen);
  float  xl_s24_1=(offsets_15[n_15 - 2]);
  int  n_16=c_3->ylen;
  float*  offsets_16= new float [n_16]; CopyArr<float >(offsets_16,c_3->ylist, n_16, c_3->ylen);
  int  n_17=c_3->zlen;
  float*  offsets_17= new float [n_17]; CopyArr<float >(offsets_17,c_3->zlist, n_17, c_3->zlen);
  float  zl_s28_1=(offsets_17[n_17 - 2]);
  int  n_18=c_3->xlen;
  float*  offsets_18= new float [n_18]; CopyArr<float >(offsets_18,c_3->xlist, n_18, c_3->xlen);
  float  xu_s30_1=(offsets_18[n_18 - 1]);
  int  n_19=c_3->ylen;
  float*  offsets_19= new float [n_19]; CopyArr<float >(offsets_19,c_3->ylist, n_19, c_3->ylen);
  float  yu_s32_1=(offsets_19[n_19 - 1]);
  int  n_20=c_3->zlen;
  float*  offsets_20= new float [n_20]; CopyArr<float >(offsets_20,c_3->zlist, n_20, c_3->zlen);
  float  zu_s34_1=(offsets_20[n_20 - 1]);
  float  roll_s36_1=0.0f;
  radian_to_degree(c_3->theta_x, roll_s36_1);
  float  pitch_s38_1=0.0f;
  radian_to_degree(c_3->theta_y, pitch_s38_1);
  float  yaw_s40_1=0.0f;
  radian_to_degree(c_3->theta_z, yaw_s40_1);
  char _tt90[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt90);
  printfloat(roll_s36_1);
  char _tt91[3] = {',', ' ', '\0'};
  print(3, _tt91);
  printfloat(pitch_s38_1);
  char _tt92[3] = {',', ' ', '\0'};
  print(3, _tt92);
  printfloat(yaw_s40_1);
  char _tt93[4] = {']', ')', '\n', '\0'};
  print(4, _tt93);
  char _tt94[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt94);
  printfloat((xu_s30_1 + xl_s24_1) * 0.5f);
  char _tt95[3] = {',', ' ', '\0'};
  print(3, _tt95);
  printfloat((yu_s32_1 + (offsets_16[0])) * 0.5f);
  char _tt96[3] = {',', ' ', '\0'};
  print(3, _tt96);
  printfloat((zu_s34_1 + zl_s28_1) * 0.5f);
  char _tt97[4] = {']', ')', '\n', '\0'};
  print(4, _tt97);
  char _tt98[14] = {'c', 'u', 'b', 'e', '(', 's', 'i', 'z', 'e', ' ', '=', ' ', '[', '\0'};
  print(14, _tt98);
  printfloat(xu_s30_1 - xl_s24_1);
  char _tt99[3] = {',', ' ', '\0'};
  print(3, _tt99);
  printfloat(yu_s32_1 - (offsets_16[0]));
  char _tt100[3] = {',', ' ', '\0'};
  print(3, _tt100);
  printfloat(zu_s34_1 - zl_s28_1);
  char _tt101[20] = {']', ',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ')', ';', '\n', '\0'};
  print(20, _tt101);
  bool  x_in_range_1=((p_rotated_s22_1->x) >= (xl_s24_1)) && ((p_rotated_s22_1->x) <= (xu_s30_1));
  bool  y_in_range_1=((p_rotated_s22_1->y) >= ((offsets_16[0]))) && ((p_rotated_s22_1->y) <= (yu_s32_1));
  bool  z_in_range_1=((p_rotated_s22_1->z) >= (zl_s28_1)) && ((p_rotated_s22_1->z) <= (zu_s34_1));
  char _tt102[3] = {'}', '\n', '\0'};
  print(3, _tt102);
  char _tt103[3] = {'}', '\n', '\0'};
  print(3, _tt103);
  bool  expression2_s20=((withinRadius_0 && withinHeight_0) || ((x_in_range && y_in_range) && z_in_range)) && (((x_in_range_0 && y_in_range_0) && z_in_range_0) && !(((x_in_range_1 && y_in_range_1) && z_in_range_1)));
  char _tt104[3] = {'}', '\n', '\0'};
  print(3, _tt104);
  char _tt105[2] = {'\n', '\0'};
  print(2, _tt105);
  char _tt106[16] = {'d', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 'c', 'e', '(', ')', ' ', '{', '\n', '\0'};
  print(16, _tt106);
  bool  _out_s106=0;
  sphere1(p, _out_s106);
  char _tt107[2] = {'\n', '\0'};
  print(2, _tt107);
  char _tt108[11] = {'u', 'n', 'i', 'o', 'n', '(', ')', ' ', '{', '\n', '\0'};
  print(11, _tt108);
  CylinderHint*  c_4=(cylinderHints__ANONYMOUS_s135[2]);
  Vector*  p_rotated_s68_1=NULL;
  inverse_rotate(p, c_4->theta_x, c_4->theta_y, c_4->theta_z, p_rotated_s68_1);
  int  n_21=c_4->xlen;
  float*  offsets_21= new float [n_21]; CopyArr<float >(offsets_21,c_4->xlist, n_21, c_4->xlen);
  float  xl_s70_1=(offsets_21[n_21 - 2]);
  int  n_22=c_4->xlen;
  float*  offsets_22= new float [n_22]; CopyArr<float >(offsets_22,c_4->xlist, n_22, c_4->xlen);
  float  xu_s72_1=(offsets_22[n_22 - 1]);
  float  roll_s74_1=0.0f;
  radian_to_degree(c_4->theta_x, roll_s74_1);
  float  pitch_s76_1=0.0f;
  radian_to_degree(c_4->theta_y, pitch_s76_1);
  float  yaw_s78_1=0.0f;
  radian_to_degree(c_4->theta_z, yaw_s78_1);
  char _tt109[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt109);
  printfloat(roll_s74_1);
  char _tt110[3] = {',', ' ', '\0'};
  print(3, _tt110);
  printfloat(pitch_s76_1);
  char _tt111[3] = {',', ' ', '\0'};
  print(3, _tt111);
  printfloat(yaw_s78_1);
  char _tt112[4] = {']', ')', '\n', '\0'};
  print(4, _tt112);
  char _tt113[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt113);
  printfloat((xl_s70_1 + xu_s72_1) * 0.5f);
  char _tt114[3] = {',', ' ', '\0'};
  print(3, _tt114);
  printfloat(c_4->y);
  char _tt115[3] = {',', ' ', '\0'};
  print(3, _tt115);
  printfloat(c_4->z);
  char _tt116[4] = {']', ')', '\n', '\0'};
  print(4, _tt116);
  char _tt117[20] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '0', ',', ' ', '9', '0', ',', ' ', '0', ']', ')', '\n', '\0'};
  print(20, _tt117);
  char _tt118[14] = {'c', 'y', 'l', 'i', 'n', 'd', 'e', 'r', '(', 'h', ' ', '=', ' ', '\0'};
  print(14, _tt118);
  printfloat(xu_s72_1 - xl_s70_1);
  char _tt119[8] = {',', ' ', 'r', '1', ' ', '=', ' ', '\0'};
  print(8, _tt119);
  printfloat(c_4->radius);
  char _tt120[8] = {',', ' ', 'r', '2', ' ', '=', ' ', '\0'};
  print(8, _tt120);
  printfloat(c_4->radius);
  char _tt121[29] = {',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ',', ' ', '$', 'f', 'n', ' ', '=', ' ', '1', '2', ')', ';', '\n', '\0'};
  print(29, _tt121);
  bool  withinRadius_1=(((((p_rotated_s68_1->y - c_4->y) * (p_rotated_s68_1->y - c_4->y)) + ((p_rotated_s68_1->z - c_4->z) * (p_rotated_s68_1->z - c_4->z))) - (c_4->radius * c_4->radius))) <= (0.0f);
  bool  withinHeight_1=((p_rotated_s68_1->x) >= (xl_s70_1)) && ((p_rotated_s68_1->x) <= (xu_s72_1));
  char _tt122[2] = {'\n', '\0'};
  print(2, _tt122);
  char _tt123[16] = {'d', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 'c', 'e', '(', ')', ' ', '{', '\n', '\0'};
  print(16, _tt123);
  CuboidHint*  c_5=(cuboidHints__ANONYMOUS_s141[1]);
  Vector*  p_rotated_s22_2=NULL;
  inverse_rotate(p, c_5->theta_x, c_5->theta_y, c_5->theta_z, p_rotated_s22_2);
  int  n_23=c_5->xlen;
  float*  offsets_23= new float [n_23]; CopyArr<float >(offsets_23,c_5->xlist, n_23, c_5->xlen);
  float  xl_s24_2=(offsets_23[n_23 - 2]);
  int  n_24=c_5->ylen;
  float*  offsets_24= new float [n_24]; CopyArr<float >(offsets_24,c_5->ylist, n_24, c_5->ylen);
  float  yl_s26_2=(offsets_24[n_24 - 2]);
  int  n_25=c_5->zlen;
  float*  offsets_25= new float [n_25]; CopyArr<float >(offsets_25,c_5->zlist, n_25, c_5->zlen);
  float  zl_s28_2=(offsets_25[n_25 - 2]);
  int  n_26=c_5->xlen;
  float*  offsets_26= new float [n_26]; CopyArr<float >(offsets_26,c_5->xlist, n_26, c_5->xlen);
  float  xu_s30_2=(offsets_26[n_26 - 1]);
  int  n_27=c_5->ylen;
  float*  offsets_27= new float [n_27]; CopyArr<float >(offsets_27,c_5->ylist, n_27, c_5->ylen);
  int  n_28=c_5->zlen;
  float*  offsets_28= new float [n_28]; CopyArr<float >(offsets_28,c_5->zlist, n_28, c_5->zlen);
  float  zu_s34_2=(offsets_28[n_28 - 1]);
  float  roll_s36_2=0.0f;
  radian_to_degree(c_5->theta_x, roll_s36_2);
  float  pitch_s38_2=0.0f;
  radian_to_degree(c_5->theta_y, pitch_s38_2);
  float  yaw_s40_2=0.0f;
  radian_to_degree(c_5->theta_z, yaw_s40_2);
  char _tt124[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt124);
  printfloat(roll_s36_2);
  char _tt125[3] = {',', ' ', '\0'};
  print(3, _tt125);
  printfloat(pitch_s38_2);
  char _tt126[3] = {',', ' ', '\0'};
  print(3, _tt126);
  printfloat(yaw_s40_2);
  char _tt127[4] = {']', ')', '\n', '\0'};
  print(4, _tt127);
  char _tt128[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt128);
  printfloat((xu_s30_2 + xl_s24_2) * 0.5f);
  char _tt129[3] = {',', ' ', '\0'};
  print(3, _tt129);
  printfloat(((offsets_27[0]) + yl_s26_2) * 0.5f);
  char _tt130[3] = {',', ' ', '\0'};
  print(3, _tt130);
  printfloat((zu_s34_2 + zl_s28_2) * 0.5f);
  char _tt131[4] = {']', ')', '\n', '\0'};
  print(4, _tt131);
  char _tt132[14] = {'c', 'u', 'b', 'e', '(', 's', 'i', 'z', 'e', ' ', '=', ' ', '[', '\0'};
  print(14, _tt132);
  printfloat(xu_s30_2 - xl_s24_2);
  char _tt133[3] = {',', ' ', '\0'};
  print(3, _tt133);
  printfloat((offsets_27[0]) - yl_s26_2);
  char _tt134[3] = {',', ' ', '\0'};
  print(3, _tt134);
  printfloat(zu_s34_2 - zl_s28_2);
  char _tt135[20] = {']', ',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ')', ';', '\n', '\0'};
  print(20, _tt135);
  bool  x_in_range_2=((p_rotated_s22_2->x) >= (xl_s24_2)) && ((p_rotated_s22_2->x) <= (xu_s30_2));
  bool  y_in_range_2=((p_rotated_s22_2->y) >= (yl_s26_2)) && ((p_rotated_s22_2->y) <= ((offsets_27[0])));
  bool  z_in_range_2=((p_rotated_s22_2->z) >= (zl_s28_2)) && ((p_rotated_s22_2->z) <= (zu_s34_2));
  char _tt136[2] = {'\n', '\0'};
  print(2, _tt136);
  bool  _out_s110=0;
  sphere3(p, _out_s110);
  char _tt137[3] = {'}', '\n', '\0'};
  print(3, _tt137);
  char _tt138[3] = {'}', '\n', '\0'};
  print(3, _tt138);
  char _tt139[3] = {'}', '\n', '\0'};
  print(3, _tt139);
  char _tt140[3] = {'}', '\n', '\0'};
  print(3, _tt140);
  char _tt141[2] = {'\n', '\0'};
  print(2, _tt141);
  char _tt142[11] = {'u', 'n', 'i', 'o', 'n', '(', ')', ' ', '{', '\n', '\0'};
  print(11, _tt142);
  char _tt143[11] = {'u', 'n', 'i', 'o', 'n', '(', ')', ' ', '{', '\n', '\0'};
  print(11, _tt143);
  char _tt144[16] = {'d', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 'c', 'e', '(', ')', ' ', '{', '\n', '\0'};
  print(16, _tt144);
  bool  _out_s110_0=0;
  sphere3(p, _out_s110_0);
  char _tt145[2] = {'\n', '\0'};
  print(2, _tt145);
  char _tt146[16] = {'d', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 'c', 'e', '(', ')', ' ', '{', '\n', '\0'};
  print(16, _tt146);
  CuboidHint*  c_6=(cuboidHints__ANONYMOUS_s141[3]);
  Vector*  p_rotated_s22_3=NULL;
  inverse_rotate(p, c_6->theta_x, c_6->theta_y, c_6->theta_z, p_rotated_s22_3);
  int  n_29=c_6->xlen;
  float*  offsets_29= new float [n_29]; CopyArr<float >(offsets_29,c_6->xlist, n_29, c_6->xlen);
  int  n_30=c_6->ylen;
  float*  offsets_30= new float [n_30]; CopyArr<float >(offsets_30,c_6->ylist, n_30, c_6->ylen);
  float  yl_s26_3=(offsets_30[n_30 - 2]);
  int  n_31=c_6->zlen;
  float*  offsets_31= new float [n_31]; CopyArr<float >(offsets_31,c_6->zlist, n_31, c_6->zlen);
  float  zl_s28_3=(offsets_31[n_31 - 2]);
  int  n_32=c_6->xlen;
  float*  offsets_32= new float [n_32]; CopyArr<float >(offsets_32,c_6->xlist, n_32, c_6->xlen);
  float  xu_s30_3=(offsets_32[n_32 - 1]);
  int  n_33=c_6->ylen;
  float*  offsets_33= new float [n_33]; CopyArr<float >(offsets_33,c_6->ylist, n_33, c_6->ylen);
  float  yu_s32_3=(offsets_33[n_33 - 1]);
  int  n_34=c_6->zlen;
  float*  offsets_34= new float [n_34]; CopyArr<float >(offsets_34,c_6->zlist, n_34, c_6->zlen);
  float  zu_s34_3=(offsets_34[n_34 - 1]);
  float  roll_s36_3=0.0f;
  radian_to_degree(c_6->theta_x, roll_s36_3);
  float  pitch_s38_3=0.0f;
  radian_to_degree(c_6->theta_y, pitch_s38_3);
  float  yaw_s40_3=0.0f;
  radian_to_degree(c_6->theta_z, yaw_s40_3);
  char _tt147[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt147);
  printfloat(roll_s36_3);
  char _tt148[3] = {',', ' ', '\0'};
  print(3, _tt148);
  printfloat(pitch_s38_3);
  char _tt149[3] = {',', ' ', '\0'};
  print(3, _tt149);
  printfloat(yaw_s40_3);
  char _tt150[4] = {']', ')', '\n', '\0'};
  print(4, _tt150);
  char _tt151[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt151);
  printfloat((xu_s30_3 + (offsets_29[1])) * 0.5f);
  char _tt152[3] = {',', ' ', '\0'};
  print(3, _tt152);
  printfloat((yu_s32_3 + yl_s26_3) * 0.5f);
  char _tt153[3] = {',', ' ', '\0'};
  print(3, _tt153);
  printfloat((zu_s34_3 + zl_s28_3) * 0.5f);
  char _tt154[4] = {']', ')', '\n', '\0'};
  print(4, _tt154);
  char _tt155[14] = {'c', 'u', 'b', 'e', '(', 's', 'i', 'z', 'e', ' ', '=', ' ', '[', '\0'};
  print(14, _tt155);
  printfloat(xu_s30_3 - (offsets_29[1]));
  char _tt156[3] = {',', ' ', '\0'};
  print(3, _tt156);
  printfloat(yu_s32_3 - yl_s26_3);
  char _tt157[3] = {',', ' ', '\0'};
  print(3, _tt157);
  printfloat(zu_s34_3 - zl_s28_3);
  char _tt158[20] = {']', ',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ')', ';', '\n', '\0'};
  print(20, _tt158);
  bool  x_in_range_3=((p_rotated_s22_3->x) >= ((offsets_29[1]))) && ((p_rotated_s22_3->x) <= (xu_s30_3));
  bool  y_in_range_3=((p_rotated_s22_3->y) >= (yl_s26_3)) && ((p_rotated_s22_3->y) <= (yu_s32_3));
  bool  z_in_range_3=((p_rotated_s22_3->z) >= (zl_s28_3)) && ((p_rotated_s22_3->z) <= (zu_s34_3));
  char _tt159[2] = {'\n', '\0'};
  print(2, _tt159);
  CuboidHint*  c_7=(cuboidHints__ANONYMOUS_s141[0]);
  Vector*  p_rotated_s22_4=NULL;
  inverse_rotate(p, c_7->theta_x, c_7->theta_y, c_7->theta_z, p_rotated_s22_4);
  int  n_35=c_7->xlen;
  float*  offsets_35= new float [n_35]; CopyArr<float >(offsets_35,c_7->xlist, n_35, c_7->xlen);
  float  xl_s24_4=(offsets_35[n_35 - 2]);
  int  n_36=c_7->ylen;
  float*  offsets_36= new float [n_36]; CopyArr<float >(offsets_36,c_7->ylist, n_36, c_7->ylen);
  float  yl_s26_4=(offsets_36[n_36 - 2]);
  int  n_37=c_7->zlen;
  float*  offsets_37= new float [n_37]; CopyArr<float >(offsets_37,c_7->zlist, n_37, c_7->zlen);
  float  zl_s28_4=(offsets_37[n_37 - 2]);
  int  n_38=c_7->xlen;
  float*  offsets_38= new float [n_38]; CopyArr<float >(offsets_38,c_7->xlist, n_38, c_7->xlen);
  float  xu_s30_4=(offsets_38[n_38 - 1]);
  int  n_39=c_7->ylen;
  float*  offsets_39= new float [n_39]; CopyArr<float >(offsets_39,c_7->ylist, n_39, c_7->ylen);
  float  yu_s32_4=(offsets_39[n_39 - 1]);
  int  n_40=c_7->zlen;
  float*  offsets_40= new float [n_40]; CopyArr<float >(offsets_40,c_7->zlist, n_40, c_7->zlen);
  float  roll_s36_4=0.0f;
  radian_to_degree(c_7->theta_x, roll_s36_4);
  float  pitch_s38_4=0.0f;
  radian_to_degree(c_7->theta_y, pitch_s38_4);
  float  yaw_s40_4=0.0f;
  radian_to_degree(c_7->theta_z, yaw_s40_4);
  char _tt160[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt160);
  printfloat(roll_s36_4);
  char _tt161[3] = {',', ' ', '\0'};
  print(3, _tt161);
  printfloat(pitch_s38_4);
  char _tt162[3] = {',', ' ', '\0'};
  print(3, _tt162);
  printfloat(yaw_s40_4);
  char _tt163[4] = {']', ')', '\n', '\0'};
  print(4, _tt163);
  char _tt164[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt164);
  printfloat((xu_s30_4 + xl_s24_4) * 0.5f);
  char _tt165[3] = {',', ' ', '\0'};
  print(3, _tt165);
  printfloat((yu_s32_4 + yl_s26_4) * 0.5f);
  char _tt166[3] = {',', ' ', '\0'};
  print(3, _tt166);
  printfloat(((offsets_40[0]) + zl_s28_4) * 0.5f);
  char _tt167[4] = {']', ')', '\n', '\0'};
  print(4, _tt167);
  char _tt168[14] = {'c', 'u', 'b', 'e', '(', 's', 'i', 'z', 'e', ' ', '=', ' ', '[', '\0'};
  print(14, _tt168);
  printfloat(xu_s30_4 - xl_s24_4);
  char _tt169[3] = {',', ' ', '\0'};
  print(3, _tt169);
  printfloat(yu_s32_4 - yl_s26_4);
  char _tt170[3] = {',', ' ', '\0'};
  print(3, _tt170);
  printfloat((offsets_40[0]) - zl_s28_4);
  char _tt171[20] = {']', ',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ')', ';', '\n', '\0'};
  print(20, _tt171);
  bool  x_in_range_4=((p_rotated_s22_4->x) >= (xl_s24_4)) && ((p_rotated_s22_4->x) <= (xu_s30_4));
  bool  y_in_range_4=((p_rotated_s22_4->y) >= (yl_s26_4)) && ((p_rotated_s22_4->y) <= (yu_s32_4));
  bool  z_in_range_4=((p_rotated_s22_4->z) >= (zl_s28_4)) && ((p_rotated_s22_4->z) <= ((offsets_40[0])));
  char _tt172[3] = {'}', '\n', '\0'};
  print(3, _tt172);
  char _tt173[3] = {'}', '\n', '\0'};
  print(3, _tt173);
  char _tt174[2] = {'\n', '\0'};
  print(2, _tt174);
  char _tt175[11] = {'u', 'n', 'i', 'o', 'n', '(', ')', ' ', '{', '\n', '\0'};
  print(11, _tt175);
  char _tt176[11] = {'u', 'n', 'i', 'o', 'n', '(', ')', ' ', '{', '\n', '\0'};
  print(11, _tt176);
  bool  _out_s104=0;
  sphere0(p, _out_s104);
  char _tt177[2] = {'\n', '\0'};
  print(2, _tt177);
  bool  _out_s108=0;
  sphere2(p, _out_s108);
  char _tt178[3] = {'}', '\n', '\0'};
  print(3, _tt178);
  char _tt179[2] = {'\n', '\0'};
  print(2, _tt179);
  char _tt180[16] = {'d', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 'c', 'e', '(', ')', ' ', '{', '\n', '\0'};
  print(16, _tt180);
  bool  _out_s104_0=0;
  sphere0(p, _out_s104_0);
  char _tt181[2] = {'\n', '\0'};
  print(2, _tt181);
  CylinderHint*  c_8=(cylinderHints__ANONYMOUS_s135[1]);
  Vector*  p_rotated_s68_2=NULL;
  inverse_rotate(p, c_8->theta_x, c_8->theta_y, c_8->theta_z, p_rotated_s68_2);
  int  n_41=c_8->xlen;
  float*  offsets_41= new float [n_41]; CopyArr<float >(offsets_41,c_8->xlist, n_41, c_8->xlen);
  float  xl_s70_2=(offsets_41[n_41 - 2]);
  int  n_42=c_8->xlen;
  float*  offsets_42= new float [n_42]; CopyArr<float >(offsets_42,c_8->xlist, n_42, c_8->xlen);
  float  xu_s72_2=(offsets_42[n_42 - 1]);
  float  roll_s74_2=0.0f;
  radian_to_degree(c_8->theta_x, roll_s74_2);
  float  pitch_s76_2=0.0f;
  radian_to_degree(c_8->theta_y, pitch_s76_2);
  float  yaw_s78_2=0.0f;
  radian_to_degree(c_8->theta_z, yaw_s78_2);
  char _tt182[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt182);
  printfloat(roll_s74_2);
  char _tt183[3] = {',', ' ', '\0'};
  print(3, _tt183);
  printfloat(pitch_s76_2);
  char _tt184[3] = {',', ' ', '\0'};
  print(3, _tt184);
  printfloat(yaw_s78_2);
  char _tt185[4] = {']', ')', '\n', '\0'};
  print(4, _tt185);
  char _tt186[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt186);
  printfloat((xl_s70_2 + xu_s72_2) * 0.5f);
  char _tt187[3] = {',', ' ', '\0'};
  print(3, _tt187);
  printfloat(c_8->y);
  char _tt188[3] = {',', ' ', '\0'};
  print(3, _tt188);
  printfloat(c_8->z);
  char _tt189[4] = {']', ')', '\n', '\0'};
  print(4, _tt189);
  char _tt190[20] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '0', ',', ' ', '9', '0', ',', ' ', '0', ']', ')', '\n', '\0'};
  print(20, _tt190);
  char _tt191[14] = {'c', 'y', 'l', 'i', 'n', 'd', 'e', 'r', '(', 'h', ' ', '=', ' ', '\0'};
  print(14, _tt191);
  printfloat(xu_s72_2 - xl_s70_2);
  char _tt192[8] = {',', ' ', 'r', '1', ' ', '=', ' ', '\0'};
  print(8, _tt192);
  printfloat(c_8->radius);
  char _tt193[8] = {',', ' ', 'r', '2', ' ', '=', ' ', '\0'};
  print(8, _tt193);
  printfloat(c_8->radius);
  char _tt194[29] = {',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ',', ' ', '$', 'f', 'n', ' ', '=', ' ', '1', '2', ')', ';', '\n', '\0'};
  print(29, _tt194);
  bool  withinRadius_2=(((((p_rotated_s68_2->y - c_8->y) * (p_rotated_s68_2->y - c_8->y)) + ((p_rotated_s68_2->z - c_8->z) * (p_rotated_s68_2->z - c_8->z))) - (c_8->radius * c_8->radius))) <= (0.0f);
  bool  withinHeight_2=((p_rotated_s68_2->x) >= (xl_s70_2)) && ((p_rotated_s68_2->x) <= (xu_s72_2));
  char _tt195[3] = {'}', '\n', '\0'};
  print(3, _tt195);
  char _tt196[3] = {'}', '\n', '\0'};
  print(3, _tt196);
  char _tt197[3] = {'}', '\n', '\0'};
  print(3, _tt197);
  char _tt198[2] = {'\n', '\0'};
  print(2, _tt198);
  char _tt199[18] = {'i', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 'i', 'o', 'n', '(', ')', ' ', '{', '\n', '\0'};
  print(18, _tt199);
  char _tt200[16] = {'d', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 'c', 'e', '(', ')', ' ', '{', '\n', '\0'};
  print(16, _tt200);
  char _tt201[16] = {'d', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 'c', 'e', '(', ')', ' ', '{', '\n', '\0'};
  print(16, _tt201);
  CylinderHint*  c_9=(cylinderHints__ANONYMOUS_s135[3]);
  Vector*  p_rotated_s68_3=NULL;
  inverse_rotate(p, c_9->theta_x, c_9->theta_y, c_9->theta_z, p_rotated_s68_3);
  int  n_43=c_9->xlen;
  float*  offsets_43= new float [n_43]; CopyArr<float >(offsets_43,c_9->xlist, n_43, c_9->xlen);
  float  xl_s70_3=(offsets_43[n_43 - 2]);
  int  n_44=c_9->xlen;
  float*  offsets_44= new float [n_44]; CopyArr<float >(offsets_44,c_9->xlist, n_44, c_9->xlen);
  float  xu_s72_3=(offsets_44[n_44 - 1]);
  float  roll_s74_3=0.0f;
  radian_to_degree(c_9->theta_x, roll_s74_3);
  float  pitch_s76_3=0.0f;
  radian_to_degree(c_9->theta_y, pitch_s76_3);
  float  yaw_s78_3=0.0f;
  radian_to_degree(c_9->theta_z, yaw_s78_3);
  char _tt202[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt202);
  printfloat(roll_s74_3);
  char _tt203[3] = {',', ' ', '\0'};
  print(3, _tt203);
  printfloat(pitch_s76_3);
  char _tt204[3] = {',', ' ', '\0'};
  print(3, _tt204);
  printfloat(yaw_s78_3);
  char _tt205[4] = {']', ')', '\n', '\0'};
  print(4, _tt205);
  char _tt206[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt206);
  printfloat((xl_s70_3 + xu_s72_3) * 0.5f);
  char _tt207[3] = {',', ' ', '\0'};
  print(3, _tt207);
  printfloat(c_9->y);
  char _tt208[3] = {',', ' ', '\0'};
  print(3, _tt208);
  printfloat(c_9->z);
  char _tt209[4] = {']', ')', '\n', '\0'};
  print(4, _tt209);
  char _tt210[20] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '0', ',', ' ', '9', '0', ',', ' ', '0', ']', ')', '\n', '\0'};
  print(20, _tt210);
  char _tt211[14] = {'c', 'y', 'l', 'i', 'n', 'd', 'e', 'r', '(', 'h', ' ', '=', ' ', '\0'};
  print(14, _tt211);
  printfloat(xu_s72_3 - xl_s70_3);
  char _tt212[8] = {',', ' ', 'r', '1', ' ', '=', ' ', '\0'};
  print(8, _tt212);
  printfloat(c_9->radius);
  char _tt213[8] = {',', ' ', 'r', '2', ' ', '=', ' ', '\0'};
  print(8, _tt213);
  printfloat(c_9->radius);
  char _tt214[29] = {',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ',', ' ', '$', 'f', 'n', ' ', '=', ' ', '1', '2', ')', ';', '\n', '\0'};
  print(29, _tt214);
  bool  withinRadius_3=(((((p_rotated_s68_3->y - c_9->y) * (p_rotated_s68_3->y - c_9->y)) + ((p_rotated_s68_3->z - c_9->z) * (p_rotated_s68_3->z - c_9->z))) - (c_9->radius * c_9->radius))) <= (0.0f);
  bool  withinHeight_3=((p_rotated_s68_3->x) >= (xl_s70_3)) && ((p_rotated_s68_3->x) <= (xu_s72_3));
  char _tt215[2] = {'\n', '\0'};
  print(2, _tt215);
  bool  _out_s80=0;
  torus0(p, _out_s80);
  char _tt216[3] = {'}', '\n', '\0'};
  print(3, _tt216);
  char _tt217[2] = {'\n', '\0'};
  print(2, _tt217);
  CylinderHint*  c_10=(cylinderHints__ANONYMOUS_s135[0]);
  Vector*  p_rotated_s68_4=NULL;
  inverse_rotate(p, c_10->theta_x, c_10->theta_y, c_10->theta_z, p_rotated_s68_4);
  int  n_45=c_10->xlen;
  float*  offsets_45= new float [n_45]; CopyArr<float >(offsets_45,c_10->xlist, n_45, c_10->xlen);
  float  xl_s70_4=(offsets_45[n_45 - 2]);
  int  n_46=c_10->xlen;
  float*  offsets_46= new float [n_46]; CopyArr<float >(offsets_46,c_10->xlist, n_46, c_10->xlen);
  float  roll_s74_4=0.0f;
  radian_to_degree(c_10->theta_x, roll_s74_4);
  float  pitch_s76_4=0.0f;
  radian_to_degree(c_10->theta_y, pitch_s76_4);
  float  yaw_s78_4=0.0f;
  radian_to_degree(c_10->theta_z, yaw_s78_4);
  char _tt218[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt218);
  printfloat(roll_s74_4);
  char _tt219[3] = {',', ' ', '\0'};
  print(3, _tt219);
  printfloat(pitch_s76_4);
  char _tt220[3] = {',', ' ', '\0'};
  print(3, _tt220);
  printfloat(yaw_s78_4);
  char _tt221[4] = {']', ')', '\n', '\0'};
  print(4, _tt221);
  char _tt222[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt222);
  printfloat((xl_s70_4 + (offsets_46[0])) * 0.5f);
  char _tt223[3] = {',', ' ', '\0'};
  print(3, _tt223);
  printfloat(c_10->y);
  char _tt224[3] = {',', ' ', '\0'};
  print(3, _tt224);
  printfloat(c_10->z);
  char _tt225[4] = {']', ')', '\n', '\0'};
  print(4, _tt225);
  char _tt226[20] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '0', ',', ' ', '9', '0', ',', ' ', '0', ']', ')', '\n', '\0'};
  print(20, _tt226);
  char _tt227[14] = {'c', 'y', 'l', 'i', 'n', 'd', 'e', 'r', '(', 'h', ' ', '=', ' ', '\0'};
  print(14, _tt227);
  printfloat((offsets_46[0]) - xl_s70_4);
  char _tt228[8] = {',', ' ', 'r', '1', ' ', '=', ' ', '\0'};
  print(8, _tt228);
  printfloat(c_10->radius);
  char _tt229[8] = {',', ' ', 'r', '2', ' ', '=', ' ', '\0'};
  print(8, _tt229);
  printfloat(c_10->radius);
  char _tt230[29] = {',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ',', ' ', '$', 'f', 'n', ' ', '=', ' ', '1', '2', ')', ';', '\n', '\0'};
  print(29, _tt230);
  bool  withinRadius_4=(((((p_rotated_s68_4->y - c_10->y) * (p_rotated_s68_4->y - c_10->y)) + ((p_rotated_s68_4->z - c_10->z) * (p_rotated_s68_4->z - c_10->z))) - (c_10->radius * c_10->radius))) <= (0.0f);
  bool  withinHeight_4=((p_rotated_s68_4->x) >= (xl_s70_4)) && ((p_rotated_s68_4->x) <= ((offsets_46[0])));
  char _tt231[3] = {'}', '\n', '\0'};
  print(3, _tt231);
  char _tt232[2] = {'\n', '\0'};
  print(2, _tt232);
  char _tt233[16] = {'d', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 'c', 'e', '(', ')', ' ', '{', '\n', '\0'};
  print(16, _tt233);
  CuboidHint*  c_11=(cuboidHints__ANONYMOUS_s141[1]);
  Vector*  p_rotated_s22_5=NULL;
  inverse_rotate(p, c_11->theta_x, c_11->theta_y, c_11->theta_z, p_rotated_s22_5);
  int  n_47=c_11->xlen;
  float*  offsets_47= new float [n_47]; CopyArr<float >(offsets_47,c_11->xlist, n_47, c_11->xlen);
  float  xl_s24_5=(offsets_47[n_47 - 2]);
  int  n_48=c_11->ylen;
  float*  offsets_48= new float [n_48]; CopyArr<float >(offsets_48,c_11->ylist, n_48, c_11->ylen);
  float  yl_s26_5=(offsets_48[n_48 - 2]);
  int  n_49=c_11->zlen;
  float*  offsets_49= new float [n_49]; CopyArr<float >(offsets_49,c_11->zlist, n_49, c_11->zlen);
  float  zl_s28_5=(offsets_49[n_49 - 2]);
  int  n_50=c_11->xlen;
  float*  offsets_50= new float [n_50]; CopyArr<float >(offsets_50,c_11->xlist, n_50, c_11->xlen);
  float  xu_s30_5=(offsets_50[n_50 - 1]);
  int  n_51=c_11->ylen;
  float*  offsets_51= new float [n_51]; CopyArr<float >(offsets_51,c_11->ylist, n_51, c_11->ylen);
  int  n_52=c_11->zlen;
  float*  offsets_52= new float [n_52]; CopyArr<float >(offsets_52,c_11->zlist, n_52, c_11->zlen);
  float  zu_s34_5=(offsets_52[n_52 - 1]);
  float  roll_s36_5=0.0f;
  radian_to_degree(c_11->theta_x, roll_s36_5);
  float  pitch_s38_5=0.0f;
  radian_to_degree(c_11->theta_y, pitch_s38_5);
  float  yaw_s40_5=0.0f;
  radian_to_degree(c_11->theta_z, yaw_s40_5);
  char _tt234[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt234);
  printfloat(roll_s36_5);
  char _tt235[3] = {',', ' ', '\0'};
  print(3, _tt235);
  printfloat(pitch_s38_5);
  char _tt236[3] = {',', ' ', '\0'};
  print(3, _tt236);
  printfloat(yaw_s40_5);
  char _tt237[4] = {']', ')', '\n', '\0'};
  print(4, _tt237);
  char _tt238[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt238);
  printfloat((xu_s30_5 + xl_s24_5) * 0.5f);
  char _tt239[3] = {',', ' ', '\0'};
  print(3, _tt239);
  printfloat(((offsets_51[0]) + yl_s26_5) * 0.5f);
  char _tt240[3] = {',', ' ', '\0'};
  print(3, _tt240);
  printfloat((zu_s34_5 + zl_s28_5) * 0.5f);
  char _tt241[4] = {']', ')', '\n', '\0'};
  print(4, _tt241);
  char _tt242[14] = {'c', 'u', 'b', 'e', '(', 's', 'i', 'z', 'e', ' ', '=', ' ', '[', '\0'};
  print(14, _tt242);
  printfloat(xu_s30_5 - xl_s24_5);
  char _tt243[3] = {',', ' ', '\0'};
  print(3, _tt243);
  printfloat((offsets_51[0]) - yl_s26_5);
  char _tt244[3] = {',', ' ', '\0'};
  print(3, _tt244);
  printfloat(zu_s34_5 - zl_s28_5);
  char _tt245[20] = {']', ',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ')', ';', '\n', '\0'};
  print(20, _tt245);
  bool  x_in_range_5=((p_rotated_s22_5->x) >= (xl_s24_5)) && ((p_rotated_s22_5->x) <= (xu_s30_5));
  bool  y_in_range_5=((p_rotated_s22_5->y) >= (yl_s26_5)) && ((p_rotated_s22_5->y) <= ((offsets_51[0])));
  bool  z_in_range_5=((p_rotated_s22_5->z) >= (zl_s28_5)) && ((p_rotated_s22_5->z) <= (zu_s34_5));
  char _tt246[2] = {'\n', '\0'};
  print(2, _tt246);
  CylinderHint*  c_12=(cylinderHints__ANONYMOUS_s135[2]);
  Vector*  p_rotated_s68_5=NULL;
  inverse_rotate(p, c_12->theta_x, c_12->theta_y, c_12->theta_z, p_rotated_s68_5);
  int  n_53=c_12->xlen;
  float*  offsets_53= new float [n_53]; CopyArr<float >(offsets_53,c_12->xlist, n_53, c_12->xlen);
  float  xl_s70_5=(offsets_53[n_53 - 2]);
  int  n_54=c_12->xlen;
  float*  offsets_54= new float [n_54]; CopyArr<float >(offsets_54,c_12->xlist, n_54, c_12->xlen);
  float  roll_s74_5=0.0f;
  radian_to_degree(c_12->theta_x, roll_s74_5);
  float  pitch_s76_5=0.0f;
  radian_to_degree(c_12->theta_y, pitch_s76_5);
  float  yaw_s78_5=0.0f;
  radian_to_degree(c_12->theta_z, yaw_s78_5);
  char _tt247[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt247);
  printfloat(roll_s74_5);
  char _tt248[3] = {',', ' ', '\0'};
  print(3, _tt248);
  printfloat(pitch_s76_5);
  char _tt249[3] = {',', ' ', '\0'};
  print(3, _tt249);
  printfloat(yaw_s78_5);
  char _tt250[4] = {']', ')', '\n', '\0'};
  print(4, _tt250);
  char _tt251[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt251);
  printfloat((xl_s70_5 + (offsets_54[0])) * 0.5f);
  char _tt252[3] = {',', ' ', '\0'};
  print(3, _tt252);
  printfloat(c_12->y);
  char _tt253[3] = {',', ' ', '\0'};
  print(3, _tt253);
  printfloat(c_12->z);
  char _tt254[4] = {']', ')', '\n', '\0'};
  print(4, _tt254);
  char _tt255[20] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '0', ',', ' ', '9', '0', ',', ' ', '0', ']', ')', '\n', '\0'};
  print(20, _tt255);
  char _tt256[14] = {'c', 'y', 'l', 'i', 'n', 'd', 'e', 'r', '(', 'h', ' ', '=', ' ', '\0'};
  print(14, _tt256);
  printfloat((offsets_54[0]) - xl_s70_5);
  char _tt257[8] = {',', ' ', 'r', '1', ' ', '=', ' ', '\0'};
  print(8, _tt257);
  printfloat(c_12->radius);
  char _tt258[8] = {',', ' ', 'r', '2', ' ', '=', ' ', '\0'};
  print(8, _tt258);
  printfloat(c_12->radius);
  char _tt259[29] = {',', ' ', 'c', 'e', 'n', 't', 'e', 'r', ' ', '=', ' ', 't', 'r', 'u', 'e', ',', ' ', '$', 'f', 'n', ' ', '=', ' ', '1', '2', ')', ';', '\n', '\0'};
  print(29, _tt259);
  bool  withinRadius_5=(((((p_rotated_s68_5->y - c_12->y) * (p_rotated_s68_5->y - c_12->y)) + ((p_rotated_s68_5->z - c_12->z) * (p_rotated_s68_5->z - c_12->z))) - (c_12->radius * c_12->radius))) <= (0.0f);
  bool  withinHeight_5=((p_rotated_s68_5->x) >= (xl_s70_5)) && ((p_rotated_s68_5->x) <= ((offsets_54[0])));
  char _tt260[3] = {'}', '\n', '\0'};
  print(3, _tt260);
  char _tt261[3] = {'}', '\n', '\0'};
  print(3, _tt261);
  char _tt262[3] = {'}', '\n', '\0'};
  print(3, _tt262);
  char _tt263[3] = {'}', '\n', '\0'};
  print(3, _tt263);
  _out = (((withinRadius && withinHeight) || expression2_s20) && (_out_s106 && !(((withinRadius_1 && withinHeight_1) || (((x_in_range_2 && y_in_range_2) && z_in_range_2) && !(_out_s110)))))) || (((_out_s110_0 && !((((x_in_range_3 && y_in_range_3) && z_in_range_3) && !(((x_in_range_4 && y_in_range_4) && z_in_range_4))))) || ((_out_s104 || _out_s108) || (_out_s104_0 && !((withinRadius_2 && withinHeight_2))))) || ((((withinRadius_3 && withinHeight_3) && !(_out_s80)) && !((withinRadius_4 && withinHeight_4))) && (((x_in_range_5 && y_in_range_5) && z_in_range_5) && !((withinRadius_5 && withinHeight_5)))));
  char _tt264[9] = {'/', '/', ' ', 'E', 'n', 'd', '.', '\n', '\0'};
  print(9, _tt264);
  delete[] offsets;
  delete[] offsets_0;
  delete[] offsets_1;
  delete[] offsets_2;
  delete[] offsets_3;
  delete[] offsets_4;
  delete[] offsets_5;
  delete[] offsets_6;
  delete[] offsets_7;
  delete[] offsets_8;
  delete[] offsets_9;
  delete[] offsets_10;
  delete[] offsets_11;
  delete[] offsets_12;
  delete[] offsets_13;
  delete[] offsets_14;
  delete[] offsets_15;
  delete[] offsets_16;
  delete[] offsets_17;
  delete[] offsets_18;
  delete[] offsets_19;
  delete[] offsets_20;
  delete[] offsets_21;
  delete[] offsets_22;
  delete[] offsets_23;
  delete[] offsets_24;
  delete[] offsets_25;
  delete[] offsets_26;
  delete[] offsets_27;
  delete[] offsets_28;
  delete[] offsets_29;
  delete[] offsets_30;
  delete[] offsets_31;
  delete[] offsets_32;
  delete[] offsets_33;
  delete[] offsets_34;
  delete[] offsets_35;
  delete[] offsets_36;
  delete[] offsets_37;
  delete[] offsets_38;
  delete[] offsets_39;
  delete[] offsets_40;
  delete[] offsets_41;
  delete[] offsets_42;
  delete[] offsets_43;
  delete[] offsets_44;
  delete[] offsets_45;
  delete[] offsets_46;
  delete[] offsets_47;
  delete[] offsets_48;
  delete[] offsets_49;
  delete[] offsets_50;
  delete[] offsets_51;
  delete[] offsets_52;
  delete[] offsets_53;
  delete[] offsets_54;
  return;
}
void print(int n, char* message/* len = n */) { std::cout << message; }
void inverse_rotate(Vector* p, float theta_x, float theta_y, float theta_z, Vector*& _out) {
  float  x0=p->x;
  float  y0=p->y;
  float  z0=p->z;
  float  x1_s44=0.0f;
  math::cos(-(theta_z), x1_s44);
  float  x1_s46=0.0f;
  math::sin(-(theta_z), x1_s46);
  float  x1=0.0f;
  x1 = (x1_s44 * x0) - (x1_s46 * y0);
  float  y1_s48=0.0f;
  math::sin(-(theta_z), y1_s48);
  float  y1_s50=0.0f;
  math::cos(-(theta_z), y1_s50);
  float  y1=0.0f;
  y1 = (y1_s48 * x0) + (y1_s50 * y0);
  float  x2_s52=0.0f;
  math::cos(-(theta_y), x2_s52);
  float  x2_s54=0.0f;
  math::sin(-(theta_y), x2_s54);
  float  x2=0.0f;
  x2 = (x2_s52 * x1) + (x2_s54 * z0);
  float  z2_s56=0.0f;
  math::sin(-(theta_y), z2_s56);
  float  z2_s58=0.0f;
  math::cos(-(theta_y), z2_s58);
  float  z2=0.0f;
  z2 = (-(z2_s56) * x1) + (z2_s58 * z0);
  float  y3_s60=0.0f;
  math::cos(-(theta_x), y3_s60);
  float  y3_s62=0.0f;
  math::sin(-(theta_x), y3_s62);
  float  y3=0.0f;
  y3 = (y3_s60 * y1) - (y3_s62 * z2);
  float  z3_s64=0.0f;
  math::sin(-(theta_x), z3_s64);
  float  z3_s66=0.0f;
  math::cos(-(theta_x), z3_s66);
  float  z3=0.0f;
  z3 = (z3_s64 * y1) + (z3_s66 * z2);
  _out = Vector::create(x2, y3, z3);
  return;
}
void radian_to_degree(float radian, float& _out) {
  _out = (radian / 3.141592653589793f) * 180.0f;
  return;
}
void printfloat(float n) { std::cout << n; }
void sphere1(Vector* p, bool& _out) {
  bool  _out_s122=0;
  renderSphere(p, 0.04541f, 0.80336f, 0.34418f, 4.9462f, _out_s122);
  _out = _out_s122;
  return;
}
void sphere3(Vector* p, bool& _out) {
  bool  _out_s118=0;
  renderSphere(p, 0.15454f, -(0.85904f), -(0.27445f), 2.16377f, _out_s118);
  _out = _out_s118;
  return;
}
void sphere0(Vector* p, bool& _out) {
  bool  _out_s124=0;
  renderSphere(p, -(1.33994f), -(3.95809f), -(0.94065f), 0.91553f, _out_s124);
  _out = _out_s124;
  return;
}
void sphere2(Vector* p, bool& _out) {
  bool  _out_s120=0;
  renderSphere(p, 1.38362f, -(3.87033f), -(0.95589f), 0.92033f, _out_s120);
  _out = _out_s120;
  return;
}
void torus0(Vector* p, bool& _out) {
  bool  _out_s82=0;
  renderTorus(p, -(2.10784f), 2.61544f, -(2.50246f), 0.0124f, -(0.991724f), -(0.12779f), 0.0f, 0.128141f, -(1.558293f), 3.84969f, 3.45f, _out_s82);
  _out = _out_s82;
  return;
}
void renderSphere(Vector* p, float x, float y, float z, float r, bool& _out) {
  char _tt265[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt265);
  printfloat(x);
  char _tt266[3] = {',', ' ', '\0'};
  print(3, _tt266);
  printfloat(y);
  char _tt267[3] = {',', ' ', '\0'};
  print(3, _tt267);
  printfloat(z);
  char _tt268[4] = {']', ')', '\n', '\0'};
  print(4, _tt268);
  char _tt269[12] = {'s', 'p', 'h', 'e', 'r', 'e', '(', 'r', ' ', '=', ' ', '\0'};
  print(12, _tt269);
  float  _out_s116=0.0f;
  math::abs(r, _out_s116);
  printfloat(_out_s116);
  char _tt270[14] = {',', ' ', '$', 'f', 'n', ' ', '=', ' ', '1', '2', ')', ';', '\n', '\0'};
  print(14, _tt270);
  _out = ((((((p->x - x) * (p->x - x)) + ((p->y - y) * (p->y - y))) + ((p->z - z) * (p->z - z))) - (r * r))) <= (0.0f);
  return;
}
void renderTorus(Vector* p, float cx, float cy, float cz, float nx, float ny, float nz, float roll_0, float pitch_1, float yaw_2, float R, float r, bool& _out) {
  Vector*  c=NULL;
  c = Vector::create(cx, cy, cz);
  Vector*  n=NULL;
  n = Vector::create(nx, ny, nz);
  float  roll_s84=0.0f;
  radian_to_degree(roll_0, roll_s84);
  float  pitch_s86=0.0f;
  radian_to_degree(pitch_1, pitch_s86);
  float  yaw_s88=0.0f;
  radian_to_degree(yaw_2, yaw_s88);
  char _tt271[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt271);
  printfloat(c->x);
  char _tt272[3] = {',', ' ', '\0'};
  print(3, _tt272);
  printfloat(c->y);
  char _tt273[3] = {',', ' ', '\0'};
  print(3, _tt273);
  printfloat(c->z);
  char _tt274[4] = {']', ')', '\n', '\0'};
  print(4, _tt274);
  char _tt275[9] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '\0'};
  print(9, _tt275);
  printfloat(roll_s84);
  char _tt276[3] = {',', ' ', '\0'};
  print(3, _tt276);
  printfloat(pitch_s86);
  char _tt277[3] = {',', ' ', '\0'};
  print(3, _tt277);
  printfloat(yaw_s88);
  char _tt278[4] = {']', ')', '\n', '\0'};
  print(4, _tt278);
  char _tt279[20] = {'r', 'o', 't', 'a', 't', 'e', '(', '[', '0', ',', ' ', '9', '0', ',', ' ', '0', ']', ')', '\n', '\0'};
  print(20, _tt279);
  char _tt280[26] = {'r', 'o', 't', 'a', 't', 'e', '_', 'e', 'x', 't', 'r', 'u', 'd', 'e', '(', '$', 'f', 'n', ' ', '=', ' ', '1', '2', ')', '\n', '\0'};
  print(26, _tt280);
  char _tt281[12] = {'t', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '(', '[', '\0'};
  print(12, _tt281);
  printfloat(R);
  char _tt282[10] = {',', ' ', '0', ',', ' ', '0', ']', ')', '\n', '\0'};
  print(10, _tt282);
  char _tt283[12] = {'c', 'i', 'r', 'c', 'l', 'e', '(', 'r', ' ', '=', ' ', '\0'};
  print(12, _tt283);
  printfloat(r);
  char _tt284[14] = {',', ' ', '$', 'f', 'n', ' ', '=', ' ', '1', '2', ')', ';', '\n', '\0'};
  print(14, _tt284);
  Vector*  x=NULL;
  x = Vector::create(n->x, n->y, n->z);
  Vector*  p0_s90=NULL;
  minus(p, c, p0_s90);
  Vector*  y0_s92=NULL;
  cross(x, p0_s90, y0_s92);
  float  y_len_s94=0.0f;
  norm(y0_s92, y_len_s94);
  float  yx=y0_s92->x;
  float  yy=y0_s92->y;
  float  yz=y0_s92->z;
  if ((y_len_s94) < (0.001f)) {
    yx = 0.0f;
    yy = 1.0f;
    yz = 0.0f;
  } else {
    yx = yx / y_len_s94;
    yy = yy / y_len_s94;
    yz = yz / y_len_s94;
  }
  Vector*  y=NULL;
  y = Vector::create(yx, yy, yz);
  Vector*  z_s96=NULL;
  cross(y, x, z_s96);
  float  p0x_s98=0.0f;
  dot(p0_s90, x, p0x_s98);
  float  p0z_s100=0.0f;
  dot(p0_s90, z_s96, p0z_s100);
  _out = (((p0x_s98 * p0x_s98) + ((p0z_s100 - R) * (p0z_s100 - R)))) <= ((r * r));
  return;
}
void minus(Vector* a, Vector* b, Vector*& _out) {
  float  x=0.0f;
  x = a->x - b->x;
  float  y=0.0f;
  y = a->y - b->y;
  float  z=0.0f;
  z = a->z - b->z;
  _out = Vector::create(x, y, z);
  return;
}
void cross(Vector* a, Vector* b, Vector*& _out) {
  float  x=(a->y * b->z) - (a->z * b->y);
  float  y=(a->z * b->x) - (a->x * b->z);
  float  z=(a->x * b->y) - (a->y * b->x);
  _out = Vector::create(x, y, z);
  return;
}
void norm(Vector* a, float& _out) {
  float  _out_s102=0.0f;
  math::sqrt(((a->x * a->x) + (a->y * a->y)) + (a->z * a->z), _out_s102);
  _out = _out_s102;
  return;
}
void dot(Vector* a, Vector* b, float& _out) {
  _out = ((a->x * b->x) + (a->y * b->y)) + (a->z * b->z);
  return;
}

}
namespace math{

void abs(float v, float& _out) {_out = fabs(v);}
void cos(float v, float& _out) {_out = cosf(v);}
void sin(float v, float& _out) {_out = sinf(v);}
void sqrt(float v, float& _out) {_out = sqrtf(v);}
void tan(float v, float& _out) {_out = tanf(v);}
void log(float v, float& _out) {_out = logf(v);}
void arctan(float v, float& _out) {_out = atanf(v);}
void _cast_int_float(int v, float& _out) {_out = (float)v;}
void exp(float v, float& _out) {_out = expf(v);}

}
